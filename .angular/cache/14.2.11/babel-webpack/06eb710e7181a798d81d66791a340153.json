{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n\n  class BlockNode extends Node {\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    constructor(blocks) {\n      super(); // validate input, copy blocks\n\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n\n        return {\n          node,\n          visible\n        };\n      });\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isBlockNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalBlocks = map(this.blocks, function (block) {\n        return {\n          evaluate: block.node._compile(math, argNames),\n          visible: block.visible\n        };\n      });\n      return function evalBlockNodes(scope, args, context) {\n        var results = [];\n        forEach(evalBlocks, function evalBlockNode(block) {\n          var result = block.evaluate(scope, args, context);\n\n          if (block.visible) {\n            results.push(result);\n          }\n        });\n        return new ResultSet(results);\n      };\n    }\n    /**\n     * Execute a callback for each of the child blocks of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      for (var i = 0; i < this.blocks.length; i++) {\n        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n      }\n    }\n    /**\n     * Create a new BlockNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {BlockNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var blocks = [];\n\n      for (var i = 0; i < this.blocks.length; i++) {\n        var block = this.blocks[i];\n\n        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n\n        blocks[i] = {\n          node,\n          visible: block.visible\n        };\n      }\n\n      return new BlockNode(blocks);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {BlockNode}\n     */\n\n\n    clone() {\n      var blocks = this.blocks.map(function (block) {\n        return {\n          node: block.node,\n          visible: block.visible\n        };\n      });\n      return new BlockNode(blocks);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    _toString(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toString(options) + (param.visible ? '' : ';');\n      }).join('\\n');\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        blocks: this.blocks\n      };\n    }\n    /**\n     * Instantiate an BlockNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n     *     where mathjs is optional\n     * @returns {BlockNode}\n     */\n\n\n    static fromJSON(json) {\n      return new BlockNode(json.blocks);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toHTML(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n      }).join('<span class=\"math-separator\"><br /></span>');\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toTex(options) + (param.visible ? '' : ';');\n      }).join('\\\\;\\\\;\\n');\n    }\n\n  }\n\n  _defineProperty(BlockNode, \"name\", name);\n\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"names":["_defineProperty","isNode","forEach","map","factory","name","dependencies","createBlockNode","_ref","ResultSet","Node","BlockNode","constructor","blocks","Array","isArray","Error","block","node","visible","undefined","TypeError","type","isBlockNode","_compile","math","argNames","evalBlocks","evaluate","evalBlockNodes","scope","args","context","results","evalBlockNode","result","push","callback","i","length","_ifNode","clone","_toString","options","param","toString","join","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","isClass"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/expression/node/BlockNode.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isNode } from '../../utils/is.js';\nimport { forEach, map } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'BlockNode';\nvar dependencies = ['ResultSet', 'Node'];\nexport var createBlockNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ResultSet,\n    Node\n  } = _ref;\n  class BlockNode extends Node {\n    /**\n     * @constructor BlockNode\n     * @extends {Node}\n     * Holds a set with blocks\n     * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks\n     *            An array with blocks, where a block is constructed as an\n     *            Object with properties block, which is a Node, and visible,\n     *            which is a boolean. The property visible is optional and\n     *            is true by default\n     */\n    constructor(blocks) {\n      super();\n      // validate input, copy blocks\n      if (!Array.isArray(blocks)) throw new Error('Array expected');\n      this.blocks = blocks.map(function (block) {\n        var node = block && block.node;\n        var visible = block && block.visible !== undefined ? block.visible : true;\n        if (!isNode(node)) throw new TypeError('Property \"node\" must be a Node');\n        if (typeof visible !== 'boolean') {\n          throw new TypeError('Property \"visible\" must be a boolean');\n        }\n        return {\n          node,\n          visible\n        };\n      });\n    }\n    get type() {\n      return name;\n    }\n    get isBlockNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalBlocks = map(this.blocks, function (block) {\n        return {\n          evaluate: block.node._compile(math, argNames),\n          visible: block.visible\n        };\n      });\n      return function evalBlockNodes(scope, args, context) {\n        var results = [];\n        forEach(evalBlocks, function evalBlockNode(block) {\n          var result = block.evaluate(scope, args, context);\n          if (block.visible) {\n            results.push(result);\n          }\n        });\n        return new ResultSet(results);\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child blocks of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      for (var i = 0; i < this.blocks.length; i++) {\n        callback(this.blocks[i].node, 'blocks[' + i + '].node', this);\n      }\n    }\n\n    /**\n     * Create a new BlockNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {BlockNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var blocks = [];\n      for (var i = 0; i < this.blocks.length; i++) {\n        var block = this.blocks[i];\n        var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));\n        blocks[i] = {\n          node,\n          visible: block.visible\n        };\n      }\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {BlockNode}\n     */\n    clone() {\n      var blocks = this.blocks.map(function (block) {\n        return {\n          node: block.node,\n          visible: block.visible\n        };\n      });\n      return new BlockNode(blocks);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    _toString(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toString(options) + (param.visible ? '' : ';');\n      }).join('\\n');\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        blocks: this.blocks\n      };\n    }\n\n    /**\n     * Instantiate an BlockNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"BlockNode\", blocks: [{node: ..., visible: false}, ...]}`,\n     *     where mathjs is optional\n     * @returns {BlockNode}\n     */\n    static fromJSON(json) {\n      return new BlockNode(json.blocks);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toHTML(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toHTML(options) + (param.visible ? '' : '<span class=\"math-separator\">;</span>');\n      }).join('<span class=\"math-separator\"><br /></span>');\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      return this.blocks.map(function (param) {\n        return param.node.toTex(options) + (param.visible ? '' : ';');\n      }).join('\\\\;\\\\;\\n');\n    }\n  }\n  _defineProperty(BlockNode, \"name\", name);\n  return BlockNode;\n}, {\n  isClass: true,\n  isNode: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}