{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});","map":{"version":3,"names":["factory","name","dependencies","createLyap","_ref","typed","matrix","sylvester","multiply","transpose","MatrixMatrix","A","Q","ArrayMatrix","MatrixArray","ArrayArray","toArray"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/function/algebra/lyap.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'lyap';\nvar dependencies = ['typed', 'matrix', 'sylvester', 'multiply', 'transpose'];\nexport var createLyap = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    sylvester,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   *\n   * Solves the Continuous-time Lyapunov equation AP+PA'+Q=0 for P, where\n   * Q is an input matrix. When Q is symmetric, P is also symmetric. Notice\n   * that different equivalent definitions exist for the Continuous-time\n   * Lyapunov equation.\n   * https://en.wikipedia.org/wiki/Lyapunov_equation\n   *\n   * Syntax:\n   *\n   *     math.lyap(A, Q)\n   *\n   * Examples:\n   *\n   *     const A = [[-2, 0], [1, -4]]\n   *     const Q = [[3, 1], [1, 3]]\n   *     const P = math.lyap(A, Q)\n   *\n   * See also:\n   *\n   *     sylvester, schur\n   *\n   * @param {Matrix | Array} A  Matrix A\n   * @param {Matrix | Array} Q  Matrix Q\n   * @return {Matrix | Array} Matrix P solution to the Continuous-time Lyapunov equation AP+PA'=Q\n   */\n  return typed(name, {\n    'Matrix, Matrix': function MatrixMatrix(A, Q) {\n      return sylvester(A, transpose(A), multiply(-1, Q));\n    },\n    'Array, Matrix': function ArrayMatrix(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), multiply(-1, Q));\n    },\n    'Matrix, Array': function MatrixArray(A, Q) {\n      return sylvester(A, transpose(matrix(A)), matrix(multiply(-1, Q)));\n    },\n    'Array, Array': function ArrayArray(A, Q) {\n      return sylvester(matrix(A), transpose(matrix(A)), matrix(multiply(-1, Q))).toArray();\n    }\n  });\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,WAApB,EAAiC,UAAjC,EAA6C,WAA7C,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACzE,IAAI;IACFC,KADE;IAEFC,MAFE;IAGFC,SAHE;IAIFC,QAJE;IAKFC;EALE,IAMAL,IANJ;EAOA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAOC,KAAK,CAACJ,IAAD,EAAO;IACjB,kBAAkB,SAASS,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;MAC5C,OAAOL,SAAS,CAACI,CAAD,EAAIF,SAAS,CAACE,CAAD,CAAb,EAAkBH,QAAQ,CAAC,CAAC,CAAF,EAAKI,CAAL,CAA1B,CAAhB;IACD,CAHgB;IAIjB,iBAAiB,SAASC,WAAT,CAAqBF,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAD,CAAP,EAAYF,SAAS,CAACH,MAAM,CAACK,CAAD,CAAP,CAArB,EAAkCH,QAAQ,CAAC,CAAC,CAAF,EAAKI,CAAL,CAA1C,CAAhB;IACD,CANgB;IAOjB,iBAAiB,SAASE,WAAT,CAAqBH,CAArB,EAAwBC,CAAxB,EAA2B;MAC1C,OAAOL,SAAS,CAACI,CAAD,EAAIF,SAAS,CAACH,MAAM,CAACK,CAAD,CAAP,CAAb,EAA0BL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAF,EAAKI,CAAL,CAAT,CAAhC,CAAhB;IACD,CATgB;IAUjB,gBAAgB,SAASG,UAAT,CAAoBJ,CAApB,EAAuBC,CAAvB,EAA0B;MACxC,OAAOL,SAAS,CAACD,MAAM,CAACK,CAAD,CAAP,EAAYF,SAAS,CAACH,MAAM,CAACK,CAAD,CAAP,CAArB,EAAkCL,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAF,EAAKI,CAAL,CAAT,CAAxC,CAAT,CAAoEI,OAApE,EAAP;IACD;EAZgB,CAAP,CAAZ;AAcD,CAhD6C,CAAvC"},"metadata":{},"sourceType":"module"}