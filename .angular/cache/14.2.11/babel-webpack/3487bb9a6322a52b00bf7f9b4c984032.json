{"ast":null,"code":"import { isFraction, isMatrix, isNode, isArrayNode, isConstantNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * simplifyConstant() takes a mathjs expression (either a Node representing\n   * a parse tree or a string which it parses to produce a node), and replaces\n   * any subexpression of it consisting entirely of constants with the computed\n   * value of that subexpression.\n   *\n   * Syntax:\n   *\n   *     simplifyConstant(expr)\n   *     simplifyConstant(expr, options)\n   *\n   * Examples:\n   *\n   *     math.simplifyConstant('x + 4*3/6')  // Node \"x + 2\"\n   *     math.simplifyConstant('z cos(0)')   // Node \"z 1\"\n   *     math.simplifyConstant('(5.2 + 1.08)t', {exactFractions: false})  // Node \"6.28 t\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyCore, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with constant subexpressions evaluated\n   */\n\n  var simplifyConstant = typed('simplifyConstant', {\n    Node: node => _ensureNode(foldFraction(node, {})),\n    'Node, Object': function NodeObject(expr, options) {\n      return _ensureNode(foldFraction(expr, options));\n    }\n  });\n\n  function _removeFractions(thing) {\n    if (isFraction(thing)) {\n      return thing.valueOf();\n    }\n\n    if (thing instanceof Array) {\n      return thing.map(_removeFractions);\n    }\n\n    if (isMatrix(thing)) {\n      return matrix(_removeFractions(thing.valueOf()));\n    }\n\n    return thing;\n  }\n\n  function _eval(fnname, args, options) {\n    try {\n      return mathWithTransform[fnname].apply(null, args);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(_removeFractions);\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    },\n    string: function string(s) {\n      return new ConstantNode(s);\n    },\n    Matrix: function Matrix(m) {\n      return new ArrayNode(m.valueOf().map(e => _toNode(e)));\n    }\n  });\n\n  function _ensureNode(thing) {\n    if (isNode(thing)) {\n      return thing;\n    }\n\n    return _toNode(thing);\n  } // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n\n\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n\n    return n;\n  } // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n\n\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n\n      return _exactFraction(s.re, options);\n    },\n    'Matrix, Object': function MatrixObject(s, options) {\n      return matrix(_exactFraction(s.valueOf()));\n    },\n    'Array, Object': function ArrayObject(s, options) {\n      return s.map(_exactFraction);\n    }\n  });\n\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n\n    if (f.d === 1) {\n      return n;\n    }\n\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n  /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */\n\n\n  function _foldAccessor(obj, index, options) {\n    if (!isIndexNode(index)) {\n      // don't know what to do with that...\n      return new AccessorNode(_ensureNode(obj), _ensureNode(index));\n    }\n\n    if (isArrayNode(obj) || isMatrix(obj)) {\n      var remainingDims = Array.from(index.dimensions);\n      /* We will resolve constant indices one at a time, looking\n       * just in the first or second dimensions because (a) arrays\n       * of more than two dimensions are likely rare, and (b) pulling\n       * out the third or higher dimension would be pretty intricate.\n       * The price is that we miss simplifying [..3d array][x,y,1]\n       */\n\n      while (remainingDims.length > 0) {\n        if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {\n          var first = _toNumber(remainingDims.shift().value, options);\n\n          if (isArrayNode(obj)) {\n            obj = obj.items[first - 1];\n          } else {\n            // matrix\n            obj = obj.valueOf()[first - 1];\n\n            if (obj instanceof Array) {\n              obj = matrix(obj);\n            }\n          }\n        } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {\n          var second = _toNumber(remainingDims[1].value, options);\n\n          var tryItems = [];\n          var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();\n\n          for (var item of fromItems) {\n            if (isArrayNode(item)) {\n              tryItems.push(item.items[second - 1]);\n            } else if (isMatrix(obj)) {\n              tryItems.push(item[second - 1]);\n            } else {\n              break;\n            }\n          }\n\n          if (tryItems.length === fromItems.length) {\n            if (isArrayNode(obj)) {\n              obj = new ArrayNode(tryItems);\n            } else {\n              // matrix\n              obj = matrix(tryItems);\n            }\n\n            remainingDims.splice(1, 1);\n          } else {\n            // extracting slice along 2nd dimension failed, give up\n            break;\n          }\n        } else {\n          // neither 1st or 2nd dimension is constant, give up\n          break;\n        }\n      }\n\n      if (remainingDims.length === index.dimensions.length) {\n        /* No successful constant indexing */\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n\n      if (remainingDims.length > 0) {\n        /* Indexed some but not all dimensions */\n        index = new IndexNode(remainingDims);\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      /* All dimensions were constant, access completely resolved */\n\n\n      return obj;\n    }\n\n    if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {\n      var key = index.dimensions[0].value;\n\n      if (key in obj.properties) {\n        return obj.properties[key];\n      }\n\n      return new ConstantNode(); // undefined\n    }\n    /* Don't know how to index this sort of obj, at least not with this index */\n\n\n    return new AccessorNode(_ensureNode(obj), index);\n  }\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n\n\n  function foldOp(fn, args, makeNode, options) {\n    var first = args.shift(); // In the following reduction, sofar always has one of the three following\n    // forms: [NODE], [CONSTANT], or [NODE, CONSTANT]\n\n    var reduction = args.reduce((sofar, next) => {\n      if (!isNode(next)) {\n        var last = sofar.pop();\n\n        if (isNode(last)) {\n          return [last, next];\n        } // Two constants in a row, try to fold them into one\n\n\n        try {\n          sofar.push(_eval(fn, [last, next], options));\n          return sofar;\n        } catch (ignoreandcontinue) {\n          sofar.push(last); // fall through to Node case\n        }\n      } // Encountered a Node, or failed folding --\n      // collapse everything so far into a single tree:\n\n\n      sofar.push(_ensureNode(sofar.pop()));\n      var newtree = sofar.length === 1 ? sofar[0] : makeNode(sofar);\n      return [makeNode([newtree, _ensureNode(next)])];\n    }, [first]);\n\n    if (reduction.length === 1) {\n      return reduction[0];\n    } // Might end up with a tree and a constant at the end:\n\n\n    return makeNode([reduction[0], _toNode(reduction[1])]);\n  } // destroys the original node and returns a folded one\n\n\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n\n      case 'ConstantNode':\n        switch (typeof node.value) {\n          case 'number':\n            return _toNumber(node.value, options);\n\n          case 'string':\n            return node.value;\n\n          default:\n            if (!isNaN(node.value)) return _toNumber(node.value, options);\n        }\n\n        return node;\n\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options)); // If all args are numbers\n\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontinue) {}\n            } // Size of a matrix does not depend on entries\n\n\n            if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {\n              var sz = [];\n              var section = args[0];\n\n              while (isArrayNode(section)) {\n                sz.push(section.items.length);\n                section = section.items[0];\n              }\n\n              return matrix(sz);\n            } // Convert all args to nodes and construct a symbolic function call\n\n\n            return new FunctionNode(node.name, args.map(_ensureNode));\n          } else {// treat as operator\n          }\n        }\n\n      /* falls through */\n\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n\n          var _args;\n\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node, options.context)) {\n            _args = allChildren(node, options.context);\n            _args = _args.map(arg => foldFraction(arg, options));\n\n            if (isCommutative(fn, options.context)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n\n          return res;\n        }\n\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n\n      case 'AccessorNode':\n        return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);\n\n      case 'ArrayNode':\n        {\n          var foldItems = node.items.map(item => foldFraction(item, options));\n\n          if (foldItems.some(isNode)) {\n            return new ArrayNode(foldItems.map(_ensureNode));\n          }\n          /* All literals -- return a Matrix so we can operate on it */\n\n\n          return matrix(foldItems);\n        }\n\n      case 'IndexNode':\n        {\n          return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));\n        }\n\n      case 'ObjectNode':\n        {\n          var foldProps = {};\n\n          for (var prop in node.properties) {\n            foldProps[prop] = simplifyConstant(node.properties[prop], options);\n          }\n\n          return new ObjectNode(foldProps);\n        }\n\n      case 'AssignmentNode':\n      /* falls through */\n\n      case 'BlockNode':\n      /* falls through */\n\n      case 'FunctionAssignmentNode':\n      /* falls through */\n\n      case 'RangeNode':\n      /* falls through */\n\n      case 'ConditionalNode':\n      /* falls through */\n\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n\n  return simplifyConstant;\n});","map":{"version":3,"names":["isFraction","isMatrix","isNode","isArrayNode","isConstantNode","isIndexNode","isObjectNode","isOperatorNode","factory","createUtil","noBignumber","noFraction","name","dependencies","createSimplifyConstant","_ref","typed","config","mathWithTransform","matrix","fraction","bignumber","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","SymbolNode","isCommutative","isAssociative","allChildren","createMakeNodeFunction","simplifyConstant","Node","node","_ensureNode","foldFraction","NodeObject","expr","options","_removeFractions","thing","valueOf","Array","map","_eval","fnname","args","apply","ignore","_toNumber","_toNode","Fraction","_fractionToNode","number","n","unaryMinusNode","BigNumber","Complex","s","Error","string","Matrix","m","e","_exactFraction","exactFractions","isFinite","f","fractionsLimit","Infinity","d","stringObject","undefined","parseFloat","FractionObject","BigNumberObject","numberObject","ComplexObject","im","re","MatrixObject","ArrayObject","vn","_foldAccessor","obj","index","remainingDims","from","dimensions","length","value","first","shift","items","second","tryItems","fromItems","item","push","splice","key","properties","foldOp","fn","makeNode","reduction","reduce","sofar","next","last","pop","ignoreandcontinue","newtree","type","isNaN","rawArgs","operatorFunctions","indexOf","arg","some","sz","section","toString","_args","res","isUnary","context","consts","vars","i","unshift","content","object","foldItems","foldProps","prop","concat"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/function/algebra/simplifyConstant.js"],"sourcesContent":["import { isFraction, isMatrix, isNode, isArrayNode, isConstantNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { noBignumber, noFraction } from '../../utils/noop.js';\nvar name = 'simplifyConstant';\nvar dependencies = ['typed', 'config', 'mathWithTransform', 'matrix', '?fraction', '?bignumber', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'SymbolNode'];\nexport var createSimplifyConstant = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  } = _ref;\n  var {\n    isCommutative,\n    isAssociative,\n    allChildren,\n    createMakeNodeFunction\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n\n  /**\n   * simplifyConstant() takes a mathjs expression (either a Node representing\n   * a parse tree or a string which it parses to produce a node), and replaces\n   * any subexpression of it consisting entirely of constants with the computed\n   * value of that subexpression.\n   *\n   * Syntax:\n   *\n   *     simplifyConstant(expr)\n   *     simplifyConstant(expr, options)\n   *\n   * Examples:\n   *\n   *     math.simplifyConstant('x + 4*3/6')  // Node \"x + 2\"\n   *     math.simplifyConstant('z cos(0)')   // Node \"z 1\"\n   *     math.simplifyConstant('(5.2 + 1.08)t', {exactFractions: false})  // Node \"6.28 t\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyCore, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with constant subexpressions evaluated\n   */\n  var simplifyConstant = typed('simplifyConstant', {\n    Node: node => _ensureNode(foldFraction(node, {})),\n    'Node, Object': function NodeObject(expr, options) {\n      return _ensureNode(foldFraction(expr, options));\n    }\n  });\n  function _removeFractions(thing) {\n    if (isFraction(thing)) {\n      return thing.valueOf();\n    }\n    if (thing instanceof Array) {\n      return thing.map(_removeFractions);\n    }\n    if (isMatrix(thing)) {\n      return matrix(_removeFractions(thing.valueOf()));\n    }\n    return thing;\n  }\n  function _eval(fnname, args, options) {\n    try {\n      return mathWithTransform[fnname].apply(null, args);\n    } catch (ignore) {\n      // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again after removing Fractions\n      args = args.map(_removeFractions);\n      return _toNumber(mathWithTransform[fnname].apply(null, args), options);\n    }\n  }\n  var _toNode = typed({\n    Fraction: _fractionToNode,\n    number: function number(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n < 0) {\n        return unaryMinusNode(new ConstantNode(-n));\n      }\n      return new ConstantNode(n); // old parameters: (n.toString(), 'number')\n    },\n\n    Complex: function Complex(s) {\n      throw new Error('Cannot convert Complex number to Node');\n    },\n    string: function string(s) {\n      return new ConstantNode(s);\n    },\n    Matrix: function Matrix(m) {\n      return new ArrayNode(m.valueOf().map(e => _toNode(e)));\n    }\n  });\n  function _ensureNode(thing) {\n    if (isNode(thing)) {\n      return thing;\n    }\n    return _toNode(thing);\n  }\n\n  // convert a number to a fraction only if it can be expressed exactly,\n  // and when both numerator and denominator are small enough\n  function _exactFraction(n, options) {\n    var exactFractions = options && options.exactFractions !== false;\n    if (exactFractions && isFinite(n) && fraction) {\n      var f = fraction(n);\n      var fractionsLimit = options && typeof options.fractionsLimit === 'number' ? options.fractionsLimit : Infinity; // no limit by default\n\n      if (f.valueOf() === n && f.n < fractionsLimit && f.d < fractionsLimit) {\n        return f;\n      }\n    }\n    return n;\n  }\n\n  // Convert numbers to a preferred number type in preference order: Fraction, number, Complex\n  // BigNumbers are left alone\n  var _toNumber = typed({\n    'string, Object': function stringObject(s, options) {\n      if (config.number === 'BigNumber') {\n        if (bignumber === undefined) {\n          noBignumber();\n        }\n        return bignumber(s);\n      } else if (config.number === 'Fraction') {\n        if (fraction === undefined) {\n          noFraction();\n        }\n        return fraction(s);\n      } else {\n        var n = parseFloat(s);\n        return _exactFraction(n, options);\n      }\n    },\n    'Fraction, Object': function FractionObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n\n    'BigNumber, Object': function BigNumberObject(s, options) {\n      return s;\n    },\n    // we don't need options here\n\n    'number, Object': function numberObject(s, options) {\n      return _exactFraction(s, options);\n    },\n    'Complex, Object': function ComplexObject(s, options) {\n      if (s.im !== 0) {\n        return s;\n      }\n      return _exactFraction(s.re, options);\n    },\n    'Matrix, Object': function MatrixObject(s, options) {\n      return matrix(_exactFraction(s.valueOf()));\n    },\n    'Array, Object': function ArrayObject(s, options) {\n      return s.map(_exactFraction);\n    }\n  });\n  function unaryMinusNode(n) {\n    return new OperatorNode('-', 'unaryMinus', [n]);\n  }\n  function _fractionToNode(f) {\n    var n;\n    var vn = f.s * f.n;\n    if (vn < 0) {\n      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)]);\n    } else {\n      n = new ConstantNode(vn);\n    }\n    if (f.d === 1) {\n      return n;\n    }\n    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);\n  }\n\n  /* Handles constant indexing of ArrayNodes, matrices, and ObjectNodes */\n  function _foldAccessor(obj, index, options) {\n    if (!isIndexNode(index)) {\n      // don't know what to do with that...\n      return new AccessorNode(_ensureNode(obj), _ensureNode(index));\n    }\n    if (isArrayNode(obj) || isMatrix(obj)) {\n      var remainingDims = Array.from(index.dimensions);\n      /* We will resolve constant indices one at a time, looking\n       * just in the first or second dimensions because (a) arrays\n       * of more than two dimensions are likely rare, and (b) pulling\n       * out the third or higher dimension would be pretty intricate.\n       * The price is that we miss simplifying [..3d array][x,y,1]\n       */\n      while (remainingDims.length > 0) {\n        if (isConstantNode(remainingDims[0]) && typeof remainingDims[0].value !== 'string') {\n          var first = _toNumber(remainingDims.shift().value, options);\n          if (isArrayNode(obj)) {\n            obj = obj.items[first - 1];\n          } else {\n            // matrix\n            obj = obj.valueOf()[first - 1];\n            if (obj instanceof Array) {\n              obj = matrix(obj);\n            }\n          }\n        } else if (remainingDims.length > 1 && isConstantNode(remainingDims[1]) && typeof remainingDims[1].value !== 'string') {\n          var second = _toNumber(remainingDims[1].value, options);\n          var tryItems = [];\n          var fromItems = isArrayNode(obj) ? obj.items : obj.valueOf();\n          for (var item of fromItems) {\n            if (isArrayNode(item)) {\n              tryItems.push(item.items[second - 1]);\n            } else if (isMatrix(obj)) {\n              tryItems.push(item[second - 1]);\n            } else {\n              break;\n            }\n          }\n          if (tryItems.length === fromItems.length) {\n            if (isArrayNode(obj)) {\n              obj = new ArrayNode(tryItems);\n            } else {\n              // matrix\n              obj = matrix(tryItems);\n            }\n            remainingDims.splice(1, 1);\n          } else {\n            // extracting slice along 2nd dimension failed, give up\n            break;\n          }\n        } else {\n          // neither 1st or 2nd dimension is constant, give up\n          break;\n        }\n      }\n      if (remainingDims.length === index.dimensions.length) {\n        /* No successful constant indexing */\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      if (remainingDims.length > 0) {\n        /* Indexed some but not all dimensions */\n        index = new IndexNode(remainingDims);\n        return new AccessorNode(_ensureNode(obj), index);\n      }\n      /* All dimensions were constant, access completely resolved */\n      return obj;\n    }\n    if (isObjectNode(obj) && index.dimensions.length === 1 && isConstantNode(index.dimensions[0])) {\n      var key = index.dimensions[0].value;\n      if (key in obj.properties) {\n        return obj.properties[key];\n      }\n      return new ConstantNode(); // undefined\n    }\n    /* Don't know how to index this sort of obj, at least not with this index */\n    return new AccessorNode(_ensureNode(obj), index);\n  }\n\n  /*\n   * Create a binary tree from a list of Fractions and Nodes.\n   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so\n   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).\n   * @param args - list of Fractions and Nodes\n   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions\n   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes\n   * if args.length is 1, returns args[0]\n   * @return - Either a Node representing a binary expression or Fraction\n   */\n  function foldOp(fn, args, makeNode, options) {\n    var first = args.shift();\n\n    // In the following reduction, sofar always has one of the three following\n    // forms: [NODE], [CONSTANT], or [NODE, CONSTANT]\n    var reduction = args.reduce((sofar, next) => {\n      if (!isNode(next)) {\n        var last = sofar.pop();\n        if (isNode(last)) {\n          return [last, next];\n        }\n        // Two constants in a row, try to fold them into one\n        try {\n          sofar.push(_eval(fn, [last, next], options));\n          return sofar;\n        } catch (ignoreandcontinue) {\n          sofar.push(last);\n          // fall through to Node case\n        }\n      }\n\n      // Encountered a Node, or failed folding --\n      // collapse everything so far into a single tree:\n      sofar.push(_ensureNode(sofar.pop()));\n      var newtree = sofar.length === 1 ? sofar[0] : makeNode(sofar);\n      return [makeNode([newtree, _ensureNode(next)])];\n    }, [first]);\n    if (reduction.length === 1) {\n      return reduction[0];\n    }\n    // Might end up with a tree and a constant at the end:\n    return makeNode([reduction[0], _toNode(reduction[1])]);\n  }\n\n  // destroys the original node and returns a folded one\n  function foldFraction(node, options) {\n    switch (node.type) {\n      case 'SymbolNode':\n        return node;\n      case 'ConstantNode':\n        switch (typeof node.value) {\n          case 'number':\n            return _toNumber(node.value, options);\n          case 'string':\n            return node.value;\n          default:\n            if (!isNaN(node.value)) return _toNumber(node.value, options);\n        }\n        return node;\n      case 'FunctionNode':\n        if (mathWithTransform[node.name] && mathWithTransform[node.name].rawArgs) {\n          return node;\n        }\n        {\n          // Process operators as OperatorNode\n          var operatorFunctions = ['add', 'multiply'];\n          if (operatorFunctions.indexOf(node.name) === -1) {\n            var args = node.args.map(arg => foldFraction(arg, options));\n\n            // If all args are numbers\n            if (!args.some(isNode)) {\n              try {\n                return _eval(node.name, args, options);\n              } catch (ignoreandcontinue) {}\n            }\n\n            // Size of a matrix does not depend on entries\n            if (node.name === 'size' && args.length === 1 && isArrayNode(args[0])) {\n              var sz = [];\n              var section = args[0];\n              while (isArrayNode(section)) {\n                sz.push(section.items.length);\n                section = section.items[0];\n              }\n              return matrix(sz);\n            }\n\n            // Convert all args to nodes and construct a symbolic function call\n            return new FunctionNode(node.name, args.map(_ensureNode));\n          } else {\n            // treat as operator\n          }\n        }\n      /* falls through */\n      case 'OperatorNode':\n        {\n          var fn = node.fn.toString();\n          var _args;\n          var res;\n          var makeNode = createMakeNodeFunction(node);\n          if (isOperatorNode(node) && node.isUnary()) {\n            _args = [foldFraction(node.args[0], options)];\n            if (!isNode(_args[0])) {\n              res = _eval(fn, _args, options);\n            } else {\n              res = makeNode(_args);\n            }\n          } else if (isAssociative(node, options.context)) {\n            _args = allChildren(node, options.context);\n            _args = _args.map(arg => foldFraction(arg, options));\n            if (isCommutative(fn, options.context)) {\n              // commutative binary operator\n              var consts = [];\n              var vars = [];\n              for (var i = 0; i < _args.length; i++) {\n                if (!isNode(_args[i])) {\n                  consts.push(_args[i]);\n                } else {\n                  vars.push(_args[i]);\n                }\n              }\n              if (consts.length > 1) {\n                res = foldOp(fn, consts, makeNode, options);\n                vars.unshift(res);\n                res = foldOp(fn, vars, makeNode, options);\n              } else {\n                // we won't change the children order since it's not neccessary\n                res = foldOp(fn, _args, makeNode, options);\n              }\n            } else {\n              // non-commutative binary operator\n              res = foldOp(fn, _args, makeNode, options);\n            }\n          } else {\n            // non-associative binary operator\n            _args = node.args.map(arg => foldFraction(arg, options));\n            res = foldOp(fn, _args, makeNode, options);\n          }\n          return res;\n        }\n      case 'ParenthesisNode':\n        // remove the uneccessary parenthesis\n        return foldFraction(node.content, options);\n      case 'AccessorNode':\n        return _foldAccessor(foldFraction(node.object, options), foldFraction(node.index, options), options);\n      case 'ArrayNode':\n        {\n          var foldItems = node.items.map(item => foldFraction(item, options));\n          if (foldItems.some(isNode)) {\n            return new ArrayNode(foldItems.map(_ensureNode));\n          }\n          /* All literals -- return a Matrix so we can operate on it */\n          return matrix(foldItems);\n        }\n      case 'IndexNode':\n        {\n          return new IndexNode(node.dimensions.map(n => simplifyConstant(n, options)));\n        }\n      case 'ObjectNode':\n        {\n          var foldProps = {};\n          for (var prop in node.properties) {\n            foldProps[prop] = simplifyConstant(node.properties[prop], options);\n          }\n          return new ObjectNode(foldProps);\n        }\n      case 'AssignmentNode':\n      /* falls through */\n      case 'BlockNode':\n      /* falls through */\n      case 'FunctionAssignmentNode':\n      /* falls through */\n      case 'RangeNode':\n      /* falls through */\n      case 'ConditionalNode':\n      /* falls through */\n      default:\n        throw new Error(\"Unimplemented node type in simplifyConstant: \".concat(node.type));\n    }\n  }\n  return simplifyConstant;\n});"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,WAAvC,EAAoDC,cAApD,EAAoEC,WAApE,EAAiFC,YAAjF,EAA+FC,cAA/F,QAAqH,mBAArH;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,qBAAxC;AACA,IAAIC,IAAI,GAAG,kBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,mBAApB,EAAyC,QAAzC,EAAmD,WAAnD,EAAgE,YAAhE,EAA8E,cAA9E,EAA8F,WAA9F,EAA2G,cAA3G,EAA2H,cAA3H,EAA2I,WAA3I,EAAwJ,YAAxJ,EAAsK,cAAtK,EAAsL,YAAtL,CAAnB;AACA,OAAO,IAAIC,sBAAsB,GAAG,eAAeN,OAAO,CAACI,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACrF,IAAI;IACFC,KADE;IAEFC,MAFE;IAGFC,iBAHE;IAIFC,MAJE;IAKFC,QALE;IAMFC,SANE;IAOFC,YAPE;IAQFC,SARE;IASFC,YATE;IAUFC,YAVE;IAWFC,SAXE;IAYFC,UAZE;IAaFC,YAbE;IAcFC;EAdE,IAeAd,IAfJ;EAgBA,IAAI;IACFe,aADE;IAEFC,aAFE;IAGFC,WAHE;IAIFC;EAJE,IAKAxB,UAAU,CAAC;IACbgB,YADa;IAEbG,YAFa;IAGbC;EAHa,CAAD,CALd;EAWA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,IAAIK,gBAAgB,GAAGlB,KAAK,CAAC,kBAAD,EAAqB;IAC/CmB,IAAI,EAAEC,IAAI,IAAIC,WAAW,CAACC,YAAY,CAACF,IAAD,EAAO,EAAP,CAAb,CADsB;IAE/C,gBAAgB,SAASG,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmC;MACjD,OAAOJ,WAAW,CAACC,YAAY,CAACE,IAAD,EAAOC,OAAP,CAAb,CAAlB;IACD;EAJ8C,CAArB,CAA5B;;EAMA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;IAC/B,IAAI3C,UAAU,CAAC2C,KAAD,CAAd,EAAuB;MACrB,OAAOA,KAAK,CAACC,OAAN,EAAP;IACD;;IACD,IAAID,KAAK,YAAYE,KAArB,EAA4B;MAC1B,OAAOF,KAAK,CAACG,GAAN,CAAUJ,gBAAV,CAAP;IACD;;IACD,IAAIzC,QAAQ,CAAC0C,KAAD,CAAZ,EAAqB;MACnB,OAAOxB,MAAM,CAACuB,gBAAgB,CAACC,KAAK,CAACC,OAAN,EAAD,CAAjB,CAAb;IACD;;IACD,OAAOD,KAAP;EACD;;EACD,SAASI,KAAT,CAAeC,MAAf,EAAuBC,IAAvB,EAA6BR,OAA7B,EAAsC;IACpC,IAAI;MACF,OAAOvB,iBAAiB,CAAC8B,MAAD,CAAjB,CAA0BE,KAA1B,CAAgC,IAAhC,EAAsCD,IAAtC,CAAP;IACD,CAFD,CAEE,OAAOE,MAAP,EAAe;MACf;MACAF,IAAI,GAAGA,IAAI,CAACH,GAAL,CAASJ,gBAAT,CAAP;MACA,OAAOU,SAAS,CAAClC,iBAAiB,CAAC8B,MAAD,CAAjB,CAA0BE,KAA1B,CAAgC,IAAhC,EAAsCD,IAAtC,CAAD,EAA8CR,OAA9C,CAAhB;IACD;EACF;;EACD,IAAIY,OAAO,GAAGrC,KAAK,CAAC;IAClBsC,QAAQ,EAAEC,eADQ;IAElBC,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,IAAIA,CAAC,GAAG,CAAR,EAAW;QACT,OAAOC,cAAc,CAAC,IAAIlC,YAAJ,CAAiB,CAACiC,CAAlB,CAAD,CAArB;MACD;;MACD,OAAO,IAAIjC,YAAJ,CAAiBiC,CAAjB,CAAP;IACD,CAPiB;IAQlBE,SAAS,EAAE,SAASA,SAAT,CAAmBF,CAAnB,EAAsB;MAC/B,IAAIA,CAAC,GAAG,CAAR,EAAW;QACT,OAAOC,cAAc,CAAC,IAAIlC,YAAJ,CAAiB,CAACiC,CAAlB,CAAD,CAArB;MACD;;MACD,OAAO,IAAIjC,YAAJ,CAAiBiC,CAAjB,CAAP,CAJ+B,CAIH;IAC7B,CAbiB;IAelBG,OAAO,EAAE,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;MAC3B,MAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;IACD,CAjBiB;IAkBlBC,MAAM,EAAE,SAASA,MAAT,CAAgBF,CAAhB,EAAmB;MACzB,OAAO,IAAIrC,YAAJ,CAAiBqC,CAAjB,CAAP;IACD,CApBiB;IAqBlBG,MAAM,EAAE,SAASA,MAAT,CAAgBC,CAAhB,EAAmB;MACzB,OAAO,IAAI1C,SAAJ,CAAc0C,CAAC,CAACrB,OAAF,GAAYE,GAAZ,CAAgBoB,CAAC,IAAIb,OAAO,CAACa,CAAD,CAA5B,CAAd,CAAP;IACD;EAvBiB,CAAD,CAAnB;;EAyBA,SAAS7B,WAAT,CAAqBM,KAArB,EAA4B;IAC1B,IAAIzC,MAAM,CAACyC,KAAD,CAAV,EAAmB;MACjB,OAAOA,KAAP;IACD;;IACD,OAAOU,OAAO,CAACV,KAAD,CAAd;EACD,CAhHoF,CAkHrF;EACA;;;EACA,SAASwB,cAAT,CAAwBV,CAAxB,EAA2BhB,OAA3B,EAAoC;IAClC,IAAI2B,cAAc,GAAG3B,OAAO,IAAIA,OAAO,CAAC2B,cAAR,KAA2B,KAA3D;;IACA,IAAIA,cAAc,IAAIC,QAAQ,CAACZ,CAAD,CAA1B,IAAiCrC,QAArC,EAA+C;MAC7C,IAAIkD,CAAC,GAAGlD,QAAQ,CAACqC,CAAD,CAAhB;MACA,IAAIc,cAAc,GAAG9B,OAAO,IAAI,OAAOA,OAAO,CAAC8B,cAAf,KAAkC,QAA7C,GAAwD9B,OAAO,CAAC8B,cAAhE,GAAiFC,QAAtG,CAF6C,CAEmE;;MAEhH,IAAIF,CAAC,CAAC1B,OAAF,OAAgBa,CAAhB,IAAqBa,CAAC,CAACb,CAAF,GAAMc,cAA3B,IAA6CD,CAAC,CAACG,CAAF,GAAMF,cAAvD,EAAuE;QACrE,OAAOD,CAAP;MACD;IACF;;IACD,OAAOb,CAAP;EACD,CA/HoF,CAiIrF;EACA;;;EACA,IAAIL,SAAS,GAAGpC,KAAK,CAAC;IACpB,kBAAkB,SAAS0D,YAAT,CAAsBb,CAAtB,EAAyBpB,OAAzB,EAAkC;MAClD,IAAIxB,MAAM,CAACuC,MAAP,KAAkB,WAAtB,EAAmC;QACjC,IAAInC,SAAS,KAAKsD,SAAlB,EAA6B;UAC3BjE,WAAW;QACZ;;QACD,OAAOW,SAAS,CAACwC,CAAD,CAAhB;MACD,CALD,MAKO,IAAI5C,MAAM,CAACuC,MAAP,KAAkB,UAAtB,EAAkC;QACvC,IAAIpC,QAAQ,KAAKuD,SAAjB,EAA4B;UAC1BhE,UAAU;QACX;;QACD,OAAOS,QAAQ,CAACyC,CAAD,CAAf;MACD,CALM,MAKA;QACL,IAAIJ,CAAC,GAAGmB,UAAU,CAACf,CAAD,CAAlB;QACA,OAAOM,cAAc,CAACV,CAAD,EAAIhB,OAAJ,CAArB;MACD;IACF,CAhBmB;IAiBpB,oBAAoB,SAASoC,cAAT,CAAwBhB,CAAxB,EAA2BpB,OAA3B,EAAoC;MACtD,OAAOoB,CAAP;IACD,CAnBmB;IAoBpB;IAEA,qBAAqB,SAASiB,eAAT,CAAyBjB,CAAzB,EAA4BpB,OAA5B,EAAqC;MACxD,OAAOoB,CAAP;IACD,CAxBmB;IAyBpB;IAEA,kBAAkB,SAASkB,YAAT,CAAsBlB,CAAtB,EAAyBpB,OAAzB,EAAkC;MAClD,OAAO0B,cAAc,CAACN,CAAD,EAAIpB,OAAJ,CAArB;IACD,CA7BmB;IA8BpB,mBAAmB,SAASuC,aAAT,CAAuBnB,CAAvB,EAA0BpB,OAA1B,EAAmC;MACpD,IAAIoB,CAAC,CAACoB,EAAF,KAAS,CAAb,EAAgB;QACd,OAAOpB,CAAP;MACD;;MACD,OAAOM,cAAc,CAACN,CAAC,CAACqB,EAAH,EAAOzC,OAAP,CAArB;IACD,CAnCmB;IAoCpB,kBAAkB,SAAS0C,YAAT,CAAsBtB,CAAtB,EAAyBpB,OAAzB,EAAkC;MAClD,OAAOtB,MAAM,CAACgD,cAAc,CAACN,CAAC,CAACjB,OAAF,EAAD,CAAf,CAAb;IACD,CAtCmB;IAuCpB,iBAAiB,SAASwC,WAAT,CAAqBvB,CAArB,EAAwBpB,OAAxB,EAAiC;MAChD,OAAOoB,CAAC,CAACf,GAAF,CAAMqB,cAAN,CAAP;IACD;EAzCmB,CAAD,CAArB;;EA2CA,SAAST,cAAT,CAAwBD,CAAxB,EAA2B;IACzB,OAAO,IAAI7B,YAAJ,CAAiB,GAAjB,EAAsB,YAAtB,EAAoC,CAAC6B,CAAD,CAApC,CAAP;EACD;;EACD,SAASF,eAAT,CAAyBe,CAAzB,EAA4B;IAC1B,IAAIb,CAAJ;IACA,IAAI4B,EAAE,GAAGf,CAAC,CAACT,CAAF,GAAMS,CAAC,CAACb,CAAjB;;IACA,IAAI4B,EAAE,GAAG,CAAT,EAAY;MACV5B,CAAC,GAAG,IAAI7B,YAAJ,CAAiB,GAAjB,EAAsB,YAAtB,EAAoC,CAAC,IAAIJ,YAAJ,CAAiB,CAAC6D,EAAlB,CAAD,CAApC,CAAJ;IACD,CAFD,MAEO;MACL5B,CAAC,GAAG,IAAIjC,YAAJ,CAAiB6D,EAAjB,CAAJ;IACD;;IACD,IAAIf,CAAC,CAACG,CAAF,KAAQ,CAAZ,EAAe;MACb,OAAOhB,CAAP;IACD;;IACD,OAAO,IAAI7B,YAAJ,CAAiB,GAAjB,EAAsB,QAAtB,EAAgC,CAAC6B,CAAD,EAAI,IAAIjC,YAAJ,CAAiB8C,CAAC,CAACG,CAAnB,CAAJ,CAAhC,CAAP;EACD;EAED;;;EACA,SAASa,aAAT,CAAuBC,GAAvB,EAA4BC,KAA5B,EAAmC/C,OAAnC,EAA4C;IAC1C,IAAI,CAACpC,WAAW,CAACmF,KAAD,CAAhB,EAAyB;MACvB;MACA,OAAO,IAAIlE,YAAJ,CAAiBe,WAAW,CAACkD,GAAD,CAA5B,EAAmClD,WAAW,CAACmD,KAAD,CAA9C,CAAP;IACD;;IACD,IAAIrF,WAAW,CAACoF,GAAD,CAAX,IAAoBtF,QAAQ,CAACsF,GAAD,CAAhC,EAAuC;MACrC,IAAIE,aAAa,GAAG5C,KAAK,CAAC6C,IAAN,CAAWF,KAAK,CAACG,UAAjB,CAApB;MACA;AACN;AACA;AACA;AACA;AACA;;MACM,OAAOF,aAAa,CAACG,MAAd,GAAuB,CAA9B,EAAiC;QAC/B,IAAIxF,cAAc,CAACqF,aAAa,CAAC,CAAD,CAAd,CAAd,IAAoC,OAAOA,aAAa,CAAC,CAAD,CAAb,CAAiBI,KAAxB,KAAkC,QAA1E,EAAoF;UAClF,IAAIC,KAAK,GAAG1C,SAAS,CAACqC,aAAa,CAACM,KAAd,GAAsBF,KAAvB,EAA8BpD,OAA9B,CAArB;;UACA,IAAItC,WAAW,CAACoF,GAAD,CAAf,EAAsB;YACpBA,GAAG,GAAGA,GAAG,CAACS,KAAJ,CAAUF,KAAK,GAAG,CAAlB,CAAN;UACD,CAFD,MAEO;YACL;YACAP,GAAG,GAAGA,GAAG,CAAC3C,OAAJ,GAAckD,KAAK,GAAG,CAAtB,CAAN;;YACA,IAAIP,GAAG,YAAY1C,KAAnB,EAA0B;cACxB0C,GAAG,GAAGpE,MAAM,CAACoE,GAAD,CAAZ;YACD;UACF;QACF,CAXD,MAWO,IAAIE,aAAa,CAACG,MAAd,GAAuB,CAAvB,IAA4BxF,cAAc,CAACqF,aAAa,CAAC,CAAD,CAAd,CAA1C,IAAgE,OAAOA,aAAa,CAAC,CAAD,CAAb,CAAiBI,KAAxB,KAAkC,QAAtG,EAAgH;UACrH,IAAII,MAAM,GAAG7C,SAAS,CAACqC,aAAa,CAAC,CAAD,CAAb,CAAiBI,KAAlB,EAAyBpD,OAAzB,CAAtB;;UACA,IAAIyD,QAAQ,GAAG,EAAf;UACA,IAAIC,SAAS,GAAGhG,WAAW,CAACoF,GAAD,CAAX,GAAmBA,GAAG,CAACS,KAAvB,GAA+BT,GAAG,CAAC3C,OAAJ,EAA/C;;UACA,KAAK,IAAIwD,IAAT,IAAiBD,SAAjB,EAA4B;YAC1B,IAAIhG,WAAW,CAACiG,IAAD,CAAf,EAAuB;cACrBF,QAAQ,CAACG,IAAT,CAAcD,IAAI,CAACJ,KAAL,CAAWC,MAAM,GAAG,CAApB,CAAd;YACD,CAFD,MAEO,IAAIhG,QAAQ,CAACsF,GAAD,CAAZ,EAAmB;cACxBW,QAAQ,CAACG,IAAT,CAAcD,IAAI,CAACH,MAAM,GAAG,CAAV,CAAlB;YACD,CAFM,MAEA;cACL;YACD;UACF;;UACD,IAAIC,QAAQ,CAACN,MAAT,KAAoBO,SAAS,CAACP,MAAlC,EAA0C;YACxC,IAAIzF,WAAW,CAACoF,GAAD,CAAf,EAAsB;cACpBA,GAAG,GAAG,IAAIhE,SAAJ,CAAc2E,QAAd,CAAN;YACD,CAFD,MAEO;cACL;cACAX,GAAG,GAAGpE,MAAM,CAAC+E,QAAD,CAAZ;YACD;;YACDT,aAAa,CAACa,MAAd,CAAqB,CAArB,EAAwB,CAAxB;UACD,CARD,MAQO;YACL;YACA;UACD;QACF,CAzBM,MAyBA;UACL;UACA;QACD;MACF;;MACD,IAAIb,aAAa,CAACG,MAAd,KAAyBJ,KAAK,CAACG,UAAN,CAAiBC,MAA9C,EAAsD;QACpD;QACA,OAAO,IAAItE,YAAJ,CAAiBe,WAAW,CAACkD,GAAD,CAA5B,EAAmCC,KAAnC,CAAP;MACD;;MACD,IAAIC,aAAa,CAACG,MAAd,GAAuB,CAA3B,EAA8B;QAC5B;QACAJ,KAAK,GAAG,IAAI9D,SAAJ,CAAc+D,aAAd,CAAR;QACA,OAAO,IAAInE,YAAJ,CAAiBe,WAAW,CAACkD,GAAD,CAA5B,EAAmCC,KAAnC,CAAP;MACD;MACD;;;MACA,OAAOD,GAAP;IACD;;IACD,IAAIjF,YAAY,CAACiF,GAAD,CAAZ,IAAqBC,KAAK,CAACG,UAAN,CAAiBC,MAAjB,KAA4B,CAAjD,IAAsDxF,cAAc,CAACoF,KAAK,CAACG,UAAN,CAAiB,CAAjB,CAAD,CAAxE,EAA+F;MAC7F,IAAIY,GAAG,GAAGf,KAAK,CAACG,UAAN,CAAiB,CAAjB,EAAoBE,KAA9B;;MACA,IAAIU,GAAG,IAAIhB,GAAG,CAACiB,UAAf,EAA2B;QACzB,OAAOjB,GAAG,CAACiB,UAAJ,CAAeD,GAAf,CAAP;MACD;;MACD,OAAO,IAAI/E,YAAJ,EAAP,CAL6F,CAKlE;IAC5B;IACD;;;IACA,OAAO,IAAIF,YAAJ,CAAiBe,WAAW,CAACkD,GAAD,CAA5B,EAAmCC,KAAnC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,SAASiB,MAAT,CAAgBC,EAAhB,EAAoBzD,IAApB,EAA0B0D,QAA1B,EAAoClE,OAApC,EAA6C;IAC3C,IAAIqD,KAAK,GAAG7C,IAAI,CAAC8C,KAAL,EAAZ,CAD2C,CAG3C;IACA;;IACA,IAAIa,SAAS,GAAG3D,IAAI,CAAC4D,MAAL,CAAY,CAACC,KAAD,EAAQC,IAAR,KAAiB;MAC3C,IAAI,CAAC7G,MAAM,CAAC6G,IAAD,CAAX,EAAmB;QACjB,IAAIC,IAAI,GAAGF,KAAK,CAACG,GAAN,EAAX;;QACA,IAAI/G,MAAM,CAAC8G,IAAD,CAAV,EAAkB;UAChB,OAAO,CAACA,IAAD,EAAOD,IAAP,CAAP;QACD,CAJgB,CAKjB;;;QACA,IAAI;UACFD,KAAK,CAACT,IAAN,CAAWtD,KAAK,CAAC2D,EAAD,EAAK,CAACM,IAAD,EAAOD,IAAP,CAAL,EAAmBtE,OAAnB,CAAhB;UACA,OAAOqE,KAAP;QACD,CAHD,CAGE,OAAOI,iBAAP,EAA0B;UAC1BJ,KAAK,CAACT,IAAN,CAAWW,IAAX,EAD0B,CAE1B;QACD;MACF,CAd0C,CAgB3C;MACA;;;MACAF,KAAK,CAACT,IAAN,CAAWhE,WAAW,CAACyE,KAAK,CAACG,GAAN,EAAD,CAAtB;MACA,IAAIE,OAAO,GAAGL,KAAK,CAAClB,MAAN,KAAiB,CAAjB,GAAqBkB,KAAK,CAAC,CAAD,CAA1B,GAAgCH,QAAQ,CAACG,KAAD,CAAtD;MACA,OAAO,CAACH,QAAQ,CAAC,CAACQ,OAAD,EAAU9E,WAAW,CAAC0E,IAAD,CAArB,CAAD,CAAT,CAAP;IACD,CArBe,EAqBb,CAACjB,KAAD,CArBa,CAAhB;;IAsBA,IAAIc,SAAS,CAAChB,MAAV,KAAqB,CAAzB,EAA4B;MAC1B,OAAOgB,SAAS,CAAC,CAAD,CAAhB;IACD,CA7B0C,CA8B3C;;;IACA,OAAOD,QAAQ,CAAC,CAACC,SAAS,CAAC,CAAD,CAAV,EAAevD,OAAO,CAACuD,SAAS,CAAC,CAAD,CAAV,CAAtB,CAAD,CAAf;EACD,CAxToF,CA0TrF;;;EACA,SAAStE,YAAT,CAAsBF,IAAtB,EAA4BK,OAA5B,EAAqC;IACnC,QAAQL,IAAI,CAACgF,IAAb;MACE,KAAK,YAAL;QACE,OAAOhF,IAAP;;MACF,KAAK,cAAL;QACE,QAAQ,OAAOA,IAAI,CAACyD,KAApB;UACE,KAAK,QAAL;YACE,OAAOzC,SAAS,CAAChB,IAAI,CAACyD,KAAN,EAAapD,OAAb,CAAhB;;UACF,KAAK,QAAL;YACE,OAAOL,IAAI,CAACyD,KAAZ;;UACF;YACE,IAAI,CAACwB,KAAK,CAACjF,IAAI,CAACyD,KAAN,CAAV,EAAwB,OAAOzC,SAAS,CAAChB,IAAI,CAACyD,KAAN,EAAapD,OAAb,CAAhB;QAN5B;;QAQA,OAAOL,IAAP;;MACF,KAAK,cAAL;QACE,IAAIlB,iBAAiB,CAACkB,IAAI,CAACxB,IAAN,CAAjB,IAAgCM,iBAAiB,CAACkB,IAAI,CAACxB,IAAN,CAAjB,CAA6B0G,OAAjE,EAA0E;UACxE,OAAOlF,IAAP;QACD;;QACD;UACE;UACA,IAAImF,iBAAiB,GAAG,CAAC,KAAD,EAAQ,UAAR,CAAxB;;UACA,IAAIA,iBAAiB,CAACC,OAAlB,CAA0BpF,IAAI,CAACxB,IAA/B,MAAyC,CAAC,CAA9C,EAAiD;YAC/C,IAAIqC,IAAI,GAAGb,IAAI,CAACa,IAAL,CAAUH,GAAV,CAAc2E,GAAG,IAAInF,YAAY,CAACmF,GAAD,EAAMhF,OAAN,CAAjC,CAAX,CAD+C,CAG/C;;YACA,IAAI,CAACQ,IAAI,CAACyE,IAAL,CAAUxH,MAAV,CAAL,EAAwB;cACtB,IAAI;gBACF,OAAO6C,KAAK,CAACX,IAAI,CAACxB,IAAN,EAAYqC,IAAZ,EAAkBR,OAAlB,CAAZ;cACD,CAFD,CAEE,OAAOyE,iBAAP,EAA0B,CAAE;YAC/B,CAR8C,CAU/C;;;YACA,IAAI9E,IAAI,CAACxB,IAAL,KAAc,MAAd,IAAwBqC,IAAI,CAAC2C,MAAL,KAAgB,CAAxC,IAA6CzF,WAAW,CAAC8C,IAAI,CAAC,CAAD,CAAL,CAA5D,EAAuE;cACrE,IAAI0E,EAAE,GAAG,EAAT;cACA,IAAIC,OAAO,GAAG3E,IAAI,CAAC,CAAD,CAAlB;;cACA,OAAO9C,WAAW,CAACyH,OAAD,CAAlB,EAA6B;gBAC3BD,EAAE,CAACtB,IAAH,CAAQuB,OAAO,CAAC5B,KAAR,CAAcJ,MAAtB;gBACAgC,OAAO,GAAGA,OAAO,CAAC5B,KAAR,CAAc,CAAd,CAAV;cACD;;cACD,OAAO7E,MAAM,CAACwG,EAAD,CAAb;YACD,CAnB8C,CAqB/C;;;YACA,OAAO,IAAIlG,YAAJ,CAAiBW,IAAI,CAACxB,IAAtB,EAA4BqC,IAAI,CAACH,GAAL,CAAST,WAAT,CAA5B,CAAP;UACD,CAvBD,MAuBO,CACL;UACD;QACF;;MACH;;MACA,KAAK,cAAL;QACE;UACE,IAAIqE,EAAE,GAAGtE,IAAI,CAACsE,EAAL,CAAQmB,QAAR,EAAT;;UACA,IAAIC,KAAJ;;UACA,IAAIC,GAAJ;UACA,IAAIpB,QAAQ,GAAG1E,sBAAsB,CAACG,IAAD,CAArC;;UACA,IAAI7B,cAAc,CAAC6B,IAAD,CAAd,IAAwBA,IAAI,CAAC4F,OAAL,EAA5B,EAA4C;YAC1CF,KAAK,GAAG,CAACxF,YAAY,CAACF,IAAI,CAACa,IAAL,CAAU,CAAV,CAAD,EAAeR,OAAf,CAAb,CAAR;;YACA,IAAI,CAACvC,MAAM,CAAC4H,KAAK,CAAC,CAAD,CAAN,CAAX,EAAuB;cACrBC,GAAG,GAAGhF,KAAK,CAAC2D,EAAD,EAAKoB,KAAL,EAAYrF,OAAZ,CAAX;YACD,CAFD,MAEO;cACLsF,GAAG,GAAGpB,QAAQ,CAACmB,KAAD,CAAd;YACD;UACF,CAPD,MAOO,IAAI/F,aAAa,CAACK,IAAD,EAAOK,OAAO,CAACwF,OAAf,CAAjB,EAA0C;YAC/CH,KAAK,GAAG9F,WAAW,CAACI,IAAD,EAAOK,OAAO,CAACwF,OAAf,CAAnB;YACAH,KAAK,GAAGA,KAAK,CAAChF,GAAN,CAAU2E,GAAG,IAAInF,YAAY,CAACmF,GAAD,EAAMhF,OAAN,CAA7B,CAAR;;YACA,IAAIX,aAAa,CAAC4E,EAAD,EAAKjE,OAAO,CAACwF,OAAb,CAAjB,EAAwC;cACtC;cACA,IAAIC,MAAM,GAAG,EAAb;cACA,IAAIC,IAAI,GAAG,EAAX;;cACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAAK,CAAClC,MAA1B,EAAkCwC,CAAC,EAAnC,EAAuC;gBACrC,IAAI,CAAClI,MAAM,CAAC4H,KAAK,CAACM,CAAD,CAAN,CAAX,EAAuB;kBACrBF,MAAM,CAAC7B,IAAP,CAAYyB,KAAK,CAACM,CAAD,CAAjB;gBACD,CAFD,MAEO;kBACLD,IAAI,CAAC9B,IAAL,CAAUyB,KAAK,CAACM,CAAD,CAAf;gBACD;cACF;;cACD,IAAIF,MAAM,CAACtC,MAAP,GAAgB,CAApB,EAAuB;gBACrBmC,GAAG,GAAGtB,MAAM,CAACC,EAAD,EAAKwB,MAAL,EAAavB,QAAb,EAAuBlE,OAAvB,CAAZ;gBACA0F,IAAI,CAACE,OAAL,CAAaN,GAAb;gBACAA,GAAG,GAAGtB,MAAM,CAACC,EAAD,EAAKyB,IAAL,EAAWxB,QAAX,EAAqBlE,OAArB,CAAZ;cACD,CAJD,MAIO;gBACL;gBACAsF,GAAG,GAAGtB,MAAM,CAACC,EAAD,EAAKoB,KAAL,EAAYnB,QAAZ,EAAsBlE,OAAtB,CAAZ;cACD;YACF,CAnBD,MAmBO;cACL;cACAsF,GAAG,GAAGtB,MAAM,CAACC,EAAD,EAAKoB,KAAL,EAAYnB,QAAZ,EAAsBlE,OAAtB,CAAZ;YACD;UACF,CA1BM,MA0BA;YACL;YACAqF,KAAK,GAAG1F,IAAI,CAACa,IAAL,CAAUH,GAAV,CAAc2E,GAAG,IAAInF,YAAY,CAACmF,GAAD,EAAMhF,OAAN,CAAjC,CAAR;YACAsF,GAAG,GAAGtB,MAAM,CAACC,EAAD,EAAKoB,KAAL,EAAYnB,QAAZ,EAAsBlE,OAAtB,CAAZ;UACD;;UACD,OAAOsF,GAAP;QACD;;MACH,KAAK,iBAAL;QACE;QACA,OAAOzF,YAAY,CAACF,IAAI,CAACkG,OAAN,EAAe7F,OAAf,CAAnB;;MACF,KAAK,cAAL;QACE,OAAO6C,aAAa,CAAChD,YAAY,CAACF,IAAI,CAACmG,MAAN,EAAc9F,OAAd,CAAb,EAAqCH,YAAY,CAACF,IAAI,CAACoD,KAAN,EAAa/C,OAAb,CAAjD,EAAwEA,OAAxE,CAApB;;MACF,KAAK,WAAL;QACE;UACE,IAAI+F,SAAS,GAAGpG,IAAI,CAAC4D,KAAL,CAAWlD,GAAX,CAAesD,IAAI,IAAI9D,YAAY,CAAC8D,IAAD,EAAO3D,OAAP,CAAnC,CAAhB;;UACA,IAAI+F,SAAS,CAACd,IAAV,CAAexH,MAAf,CAAJ,EAA4B;YAC1B,OAAO,IAAIqB,SAAJ,CAAciH,SAAS,CAAC1F,GAAV,CAAcT,WAAd,CAAd,CAAP;UACD;UACD;;;UACA,OAAOlB,MAAM,CAACqH,SAAD,CAAb;QACD;;MACH,KAAK,WAAL;QACE;UACE,OAAO,IAAI9G,SAAJ,CAAcU,IAAI,CAACuD,UAAL,CAAgB7C,GAAhB,CAAoBW,CAAC,IAAIvB,gBAAgB,CAACuB,CAAD,EAAIhB,OAAJ,CAAzC,CAAd,CAAP;QACD;;MACH,KAAK,YAAL;QACE;UACE,IAAIgG,SAAS,GAAG,EAAhB;;UACA,KAAK,IAAIC,IAAT,IAAiBtG,IAAI,CAACoE,UAAtB,EAAkC;YAChCiC,SAAS,CAACC,IAAD,CAAT,GAAkBxG,gBAAgB,CAACE,IAAI,CAACoE,UAAL,CAAgBkC,IAAhB,CAAD,EAAwBjG,OAAxB,CAAlC;UACD;;UACD,OAAO,IAAId,UAAJ,CAAe8G,SAAf,CAAP;QACD;;MACH,KAAK,gBAAL;MACA;;MACA,KAAK,WAAL;MACA;;MACA,KAAK,wBAAL;MACA;;MACA,KAAK,WAAL;MACA;;MACA,KAAK,iBAAL;MACA;;MACA;QACE,MAAM,IAAI3E,KAAJ,CAAU,gDAAgD6E,MAAhD,CAAuDvG,IAAI,CAACgF,IAA5D,CAAV,CAAN;IAnIJ;EAqID;;EACD,OAAOlF,gBAAP;AACD,CAncyD,CAAnD"},"metadata":{},"sourceType":"module"}