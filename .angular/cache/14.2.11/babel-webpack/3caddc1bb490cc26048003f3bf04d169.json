{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n\n            break;\n\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n\n            break;\n\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n\n            break;\n\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n\n        break;\n\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n\n\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n\n    return dot(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n\n\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var alength = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix columns\n\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]); // loop vector\n\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n\n      c[j] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n\n\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n\n\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n\n\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // sum (do not initialize it with zero)\n\n      var sum = mf(row[0], bdata[0]); // loop matrix a columns\n\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n\n      c[i] = sum;\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n\n\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b dense\n\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var c = []; // loop matrix a rows\n\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i]; // initialize row array\n\n      c[i] = []; // loop matrix b columns\n\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]); // loop matrix a columns\n\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n\n        c[i][j] = sum;\n      }\n    } // return matrix\n\n\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n\n\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate b matrix\n\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    } // rows & columns\n\n\n    var arows = asize[0];\n    var bcolumns = bsize[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // indeces in column jb\n\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1]; // do not process column jb if no data exists\n\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0; // loop a rows\n\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1; // C[i, jb]\n\n          var cij = void 0; // values in b column j\n\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb]; // check value has been initialized\n\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]); // update mark\n\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          } // check column has been processed and value != 0\n\n\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n\n\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0]; // result\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // workspace\n\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // update ptr\n\n    cptr[0] = 0; // rows in b\n\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib]; // check b[ib] != 0, avoid loops\n\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka]; // check value exists in current j\n\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true; // add i to pattern of C\n\n            cindex.push(ia); // x(ia) = A\n\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    } // copy values from x to column jb of c\n\n\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p]; // copy value\n\n      cvalues[p] = x[ic];\n    } // update ptr\n\n\n    cptr[1] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // validate a matrix\n\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    } // b dense\n\n\n    var bdata = b._data;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1]; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // equalScalar signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt);\n    } // result\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = []; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // rows in jb\n\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb]; // check b[ib, jb] != 0, avoid loops\n\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      } // copy values from x to column jb of c\n\n\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p]; // copy value\n\n        cvalues[p] = x[ic];\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n\n\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype; // b sparse\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype; // rows & columns\n\n    var arows = a._size[0];\n    var bcolumns = b._size[1]; // flag indicating both matrices (a & b) contain data\n\n    var values = avalues && bvalues; // datatype\n\n    var dt; // addScalar signature to use\n\n    var af = addScalar; // multiplyScalar signature to use\n\n    var mf = multiplyScalar; // process data types\n\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signatures that matches (dt, dt)\n\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    } // result\n\n\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // c matrix\n\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    }); // workspace\n\n    var x = values ? [] : undefined; // vector with marks indicating a value x[i] exists in a given column\n\n    var w = []; // variables\n\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib; // loop b columns\n\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length; // mark in workspace for current column\n\n      var mark = jb + 1; // B values & index in j\n\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb]; // check we need to process values\n\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia); // x(ia) = A\n\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka]; // check value exists in current j\n\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark; // add i to pattern of C\n\n              cindex.push(ia);\n            }\n          }\n        }\n      } // check we need to process matrix values (pattern matrix)\n\n\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p]; // copy value\n\n          cvalues[p] = x[ic];\n        }\n      }\n    } // update ptr\n\n\n    cptr[bcolumns] = cindex.length; // return sparse matrix\n\n    return c;\n  }\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n\n\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y)); // use dense matrix implementation\n\n\n      var m = selfMM(matrix(x), matrix(y)); // return array or scalar\n\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size(); // check dimensions\n\n      _validateMatrixDimensions(xsize, ysize); // process dimensions\n\n\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        } // Vector * Matrix\n\n\n        return _multiplyVectorMatrix(x, y);\n      } // process y dimensions\n\n\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      } // Matrix * Matrix\n\n\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n\n      return result;\n    })\n  });\n});","map":{"version":3,"names":["factory","isMatrix","arraySize","createMatAlgo11xS0s","createMatAlgo14xDs","name","dependencies","createMultiply","_ref","typed","matrix","addScalar","multiplyScalar","equalScalar","dot","matAlgo11xS0s","matAlgo14xDs","_validateMatrixDimensions","size1","size2","length","RangeError","Error","_multiplyVectorVector","a","b","n","_multiplyVectorMatrix","storage","_multiplyVectorDenseMatrix","adata","_data","asize","_size","adt","_datatype","bdata","bsize","bdt","alength","bcolumns","dt","af","mf","find","c","j","sum","i","createDenseMatrix","data","size","datatype","_multiplyMatrixVector","_multiplyDenseMatrixVector","_multiplySparseMatrixVector","_multiplyMatrixMatrix","_multiplyDenseMatrixDenseMatrix","_multiplyDenseMatrixSparseMatrix","_multiplySparseMatrixDenseMatrix","_multiplySparseMatrixSparseMatrix","arows","acolumns","row","x","bvalues","_values","bindex","_index","bptr","_ptr","eq","zero","convert","cvalues","cindex","cptr","createSparseMatrix","values","index","ptr","jb","kb0","kb1","last","mark","cij","kb","ib","push","avalues","aindex","aptr","brows","w","vbi","ka0","ka1","ka","ia","p1","p","ic","vbij","p0","undefined","referTo","selfMM","y","m","valueOf","MatrixMatrix","xsize","ysize","referToSelf","self","SparseMatrixAny","DenseMatrixAny","anySparseMatrix","anyDenseMatrix","ArrayAny","anyArray","rest","result"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/function/arithmetic/multiply.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isMatrix } from '../../utils/is.js';\nimport { arraySize } from '../../utils/array.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'multiply';\nvar dependencies = ['typed', 'matrix', 'addScalar', 'multiplyScalar', 'equalScalar', 'dot'];\nexport var createMultiply = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    addScalar,\n    multiplyScalar,\n    equalScalar,\n    dot\n  } = _ref;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  function _validateMatrixDimensions(size1, size2) {\n    // check left operand dimensions\n    switch (size1.length) {\n      case 1:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Vector x Vector\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');\n            }\n            break;\n          case 2:\n            // Vector x Matrix\n            if (size1[0] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      case 2:\n        // check size2\n        switch (size2.length) {\n          case 1:\n            // Matrix x Vector\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');\n            }\n            break;\n          case 2:\n            // Matrix x Matrix\n            if (size1[1] !== size2[0]) {\n              // throw error\n              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');\n            }\n            break;\n          default:\n            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');\n        }\n        break;\n      default:\n        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');\n    }\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (N)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {number}             Scalar value\n   */\n  function _multiplyVectorVector(a, b, n) {\n    // check empty vector\n    if (n === 0) {\n      throw new Error('Cannot multiply two empty vectors');\n    }\n    return dot(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Matrix         (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorMatrix(a, b) {\n    // process storage\n    if (b.storage() !== 'dense') {\n      throw new Error('Support for SparseMatrix not implemented');\n    }\n    return _multiplyVectorDenseMatrix(a, b);\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Dense Vector   (M)\n   * @param {Matrix} b            Dense Matrix   (MxN)\n   *\n   * @return {Matrix}             Dense Vector   (N)\n   */\n  function _multiplyVectorDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var alength = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix columns\n    for (var j = 0; j < bcolumns; j++) {\n      // sum (do not initialize it with zero)\n      var sum = mf(adata[0], bdata[0][j]);\n      // loop vector\n      for (var i = 1; i < alength; i++) {\n        // multiply & accumulate\n        sum = af(sum, mf(adata[i], bdata[i][j]));\n      }\n      c[j] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Dense Vector   (N)\n   *\n   * @return {Matrix}             Dense Vector   (M)\n   */\n  var _multiplyMatrixVector = typed('_multiplyMatrixVector', {\n    'DenseMatrix, any': _multiplyDenseMatrixVector,\n    'SparseMatrix, any': _multiplySparseMatrixVector\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            Matrix         (MxN)\n   * @param {Matrix} b            Matrix         (NxC)\n   *\n   * @return {Matrix}             Matrix         (MxC)\n   */\n  var _multiplyMatrixMatrix = typed('_multiplyMatrixMatrix', {\n    'DenseMatrix, DenseMatrix': _multiplyDenseMatrixDenseMatrix,\n    'DenseMatrix, SparseMatrix': _multiplyDenseMatrixSparseMatrix,\n    'SparseMatrix, DenseMatrix': _multiplySparseMatrixDenseMatrix,\n    'SparseMatrix, SparseMatrix': _multiplySparseMatrixSparseMatrix\n  });\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix  (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             Dense Vector (M)\n   */\n  function _multiplyDenseMatrixVector(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // sum (do not initialize it with zero)\n      var sum = mf(row[0], bdata[0]);\n      // loop matrix a columns\n      for (var j = 1; j < acolumns; j++) {\n        // multiply & accumulate\n        sum = af(sum, mf(row[j], bdata[j]));\n      }\n      c[i] = sum;\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            DenseMatrix    (NxC)\n   *\n   * @return {Matrix}             DenseMatrix    (MxC)\n   */\n  function _multiplyDenseMatrixDenseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b dense\n    var bdata = b._data;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = asize[0];\n    var acolumns = asize[1];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var c = [];\n\n    // loop matrix a rows\n    for (var i = 0; i < arows; i++) {\n      // current row\n      var row = adata[i];\n      // initialize row array\n      c[i] = [];\n      // loop matrix b columns\n      for (var j = 0; j < bcolumns; j++) {\n        // sum (avoid initializing sum to zero)\n        var sum = mf(row[0], bdata[0][j]);\n        // loop matrix a columns\n        for (var x = 1; x < acolumns; x++) {\n          // multiply & accumulate\n          sum = af(sum, mf(row[x], bdata[x][j]));\n        }\n        c[i][j] = sum;\n      }\n    }\n\n    // return matrix\n    return a.createDenseMatrix({\n      data: c,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            DenseMatrix    (MxN)\n   * @param {Matrix} b            SparseMatrix   (NxC)\n   *\n   * @return {Matrix}             SparseMatrix   (MxC)\n   */\n  function _multiplyDenseMatrixSparseMatrix(a, b) {\n    // a dense\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n    // validate b matrix\n    if (!bvalues) {\n      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');\n    }\n    // rows & columns\n    var arows = asize[0];\n    var bcolumns = bsize[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = b.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // indeces in column jb\n      var kb0 = bptr[jb];\n      var kb1 = bptr[jb + 1];\n      // do not process column jb if no data exists\n      if (kb1 > kb0) {\n        // last row mark processed\n        var last = 0;\n        // loop a rows\n        for (var i = 0; i < arows; i++) {\n          // column mark\n          var mark = i + 1;\n          // C[i, jb]\n          var cij = void 0;\n          // values in b column j\n          for (var kb = kb0; kb < kb1; kb++) {\n            // row\n            var ib = bindex[kb];\n            // check value has been initialized\n            if (last !== mark) {\n              // first value in column jb\n              cij = mf(adata[i][ib], bvalues[kb]);\n              // update mark\n              last = mark;\n            } else {\n              // accumulate value\n              cij = af(cij, mf(adata[i][ib], bvalues[kb]));\n            }\n          }\n          // check column has been processed and value != 0\n          if (last === mark && !eq(cij, zero)) {\n            // push row & value\n            cindex.push(i);\n            cvalues.push(cij);\n          }\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix    (MxN)\n   * @param {Matrix} b            Dense Vector (N)\n   *\n   * @return {Matrix}             SparseMatrix    (M, 1)\n   */\n  function _multiplySparseMatrixVector(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // update ptr\n    cptr[0] = 0;\n    // rows in b\n    for (var ib = 0; ib < brows; ib++) {\n      // b[ib]\n      var vbi = bdata[ib];\n      // check b[ib] != 0, avoid loops\n      if (!eq(vbi, zero)) {\n        // A values & index in ib column\n        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n          // a row\n          var ia = aindex[ka];\n          // check value exists in current j\n          if (!w[ia]) {\n            // ia is new entry in j\n            w[ia] = true;\n            // add i to pattern of C\n            cindex.push(ia);\n            // x(ia) = A\n            x[ia] = mf(vbi, avalues[ka]);\n          } else {\n            // i exists in C already\n            x[ia] = af(x[ia], mf(vbi, avalues[ka]));\n          }\n        }\n      }\n    }\n    // copy values from x to column jb of c\n    for (var p1 = cindex.length, p = 0; p < p1; p++) {\n      // row\n      var ic = cindex[p];\n      // copy value\n      cvalues[p] = x[ic];\n    }\n    // update ptr\n    cptr[1] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, 1],\n      datatype: dt\n    });\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            DenseMatrix       (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixDenseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // validate a matrix\n    if (!avalues) {\n      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');\n    }\n    // b dense\n    var bdata = b._data;\n    var bdt = b._datatype;\n    // rows & columns\n    var arows = a._size[0];\n    var brows = b._size[0];\n    var bcolumns = b._size[1];\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n    // equalScalar signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n    }\n\n    // result\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = [];\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // rows in jb\n      for (var ib = 0; ib < brows; ib++) {\n        // b[ib, jb]\n        var vbij = bdata[ib][jb];\n        // check b[ib, jb] != 0, avoid loops\n        if (!eq(vbij, zero)) {\n          // A values & index in ib column\n          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // a row\n            var ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(vbij, avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(vbij, avalues[ka]));\n            }\n          }\n        }\n      }\n      // copy values from x to column jb of c\n      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n        // row\n        var ic = cindex[p];\n        // copy value\n        cvalues[p] = x[ic];\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * C = A * B\n   *\n   * @param {Matrix} a            SparseMatrix      (MxN)\n   * @param {Matrix} b            SparseMatrix      (NxC)\n   *\n   * @return {Matrix}             SparseMatrix      (MxC)\n   */\n  function _multiplySparseMatrixSparseMatrix(a, b) {\n    // a sparse\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var adt = a._datatype;\n    // b sparse\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bdt = b._datatype;\n\n    // rows & columns\n    var arows = a._size[0];\n    var bcolumns = b._size[1];\n    // flag indicating both matrices (a & b) contain data\n    var values = avalues && bvalues;\n\n    // datatype\n    var dt;\n    // addScalar signature to use\n    var af = addScalar;\n    // multiplyScalar signature to use\n    var mf = multiplyScalar;\n\n    // process data types\n    if (adt && bdt && adt === bdt && typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signatures that matches (dt, dt)\n      af = typed.find(addScalar, [dt, dt]);\n      mf = typed.find(multiplyScalar, [dt, dt]);\n    }\n\n    // result\n    var cvalues = values ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n    // c matrix\n    var c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [arows, bcolumns],\n      datatype: dt\n    });\n\n    // workspace\n    var x = values ? [] : undefined;\n    // vector with marks indicating a value x[i] exists in a given column\n    var w = [];\n    // variables\n    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;\n    // loop b columns\n    for (var jb = 0; jb < bcolumns; jb++) {\n      // update ptr\n      cptr[jb] = cindex.length;\n      // mark in workspace for current column\n      var mark = jb + 1;\n      // B values & index in j\n      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {\n        // b row\n        ib = bindex[kb];\n        // check we need to process values\n        if (values) {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n              // x(ia) = A\n              x[ia] = mf(bvalues[kb], avalues[ka]);\n            } else {\n              // i exists in C already\n              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));\n            }\n          }\n        } else {\n          // loop values in a[:,ib]\n          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {\n            // row\n            ia = aindex[ka];\n            // check value exists in current j\n            if (w[ia] !== mark) {\n              // ia is new entry in j\n              w[ia] = mark;\n              // add i to pattern of C\n              cindex.push(ia);\n            }\n          }\n        }\n      }\n      // check we need to process matrix values (pattern matrix)\n      if (values) {\n        // copy values from x to column jb of c\n        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {\n          // row\n          var ic = cindex[p];\n          // copy value\n          cvalues[p] = x[ic];\n        }\n      }\n    }\n    // update ptr\n    cptr[bcolumns] = cindex.length;\n\n    // return sparse matrix\n    return c;\n  }\n\n  /**\n   * Multiply two or more values, `x * y`.\n   * For matrices, the matrix product is calculated.\n   *\n   * Syntax:\n   *\n   *    math.multiply(x, y)\n   *    math.multiply(x, y, z, ...)\n   *\n   * Examples:\n   *\n   *    math.multiply(4, 5.2)        // returns number 20.8\n   *    math.multiply(2, 3, 4)       // returns number 24\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.multiply(a, b)          // returns Complex 5 + 14i\n   *\n   *    const c = [[1, 2], [4, 3]]\n   *    const d = [[1, 2, 3], [3, -4, 7]]\n   *    math.multiply(c, d)          // returns Array [[7, -6, 17], [13, -4, 33]]\n   *\n   *    const e = math.unit('2.1 km')\n   *    math.multiply(3, e)          // returns Unit 6.3 km\n   *\n   * See also:\n   *\n   *    divide, prod, cross, dot\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`\n   */\n  return typed(name, multiplyScalar, {\n    // we extend the signatures of multiplyScalar with signatures dealing with matrices\n\n    'Array, Array': typed.referTo('Matrix, Matrix', selfMM => (x, y) => {\n      // check dimensions\n      _validateMatrixDimensions(arraySize(x), arraySize(y));\n\n      // use dense matrix implementation\n      var m = selfMM(matrix(x), matrix(y));\n      // return array or scalar\n      return isMatrix(m) ? m.valueOf() : m;\n    }),\n    'Matrix, Matrix': function MatrixMatrix(x, y) {\n      // dimensions\n      var xsize = x.size();\n      var ysize = y.size();\n\n      // check dimensions\n      _validateMatrixDimensions(xsize, ysize);\n\n      // process dimensions\n      if (xsize.length === 1) {\n        // process y dimensions\n        if (ysize.length === 1) {\n          // Vector * Vector\n          return _multiplyVectorVector(x, y, xsize[0]);\n        }\n        // Vector * Matrix\n        return _multiplyVectorMatrix(x, y);\n      }\n      // process y dimensions\n      if (ysize.length === 1) {\n        // Matrix * Vector\n        return _multiplyMatrixVector(x, y);\n      }\n      // Matrix * Matrix\n      return _multiplyMatrixMatrix(x, y);\n    },\n    'Matrix, Array': typed.referTo('Matrix,Matrix', selfMM => (x, y) => selfMM(x, matrix(y))),\n    'Array, Matrix': typed.referToSelf(self => (x, y) => {\n      // use Matrix * Matrix implementation\n      return self(matrix(x, y.storage()), y);\n    }),\n    'SparseMatrix, any': function SparseMatrixAny(x, y) {\n      return matAlgo11xS0s(x, y, multiplyScalar, false);\n    },\n    'DenseMatrix, any': function DenseMatrixAny(x, y) {\n      return matAlgo14xDs(x, y, multiplyScalar, false);\n    },\n    'any, SparseMatrix': function anySparseMatrix(x, y) {\n      return matAlgo11xS0s(y, x, multiplyScalar, true);\n    },\n    'any, DenseMatrix': function anyDenseMatrix(x, y) {\n      return matAlgo14xDs(y, x, multiplyScalar, true);\n    },\n    'Array, any': function ArrayAny(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(x), y, multiplyScalar, false).valueOf();\n    },\n    'any, Array': function anyArray(x, y) {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, multiplyScalar, true).valueOf();\n    },\n    'any, any': multiplyScalar,\n    'any, any, ...any': typed.referToSelf(self => (x, y, rest) => {\n      var result = self(x, y);\n      for (var i = 0; i < rest.length; i++) {\n        result = self(result, rest[i]);\n      }\n      return result;\n    })\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}