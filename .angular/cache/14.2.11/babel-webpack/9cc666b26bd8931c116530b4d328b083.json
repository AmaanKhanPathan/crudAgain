{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    } // initialize fields\n\n\n    this._minimum = null;\n    this._size = 0;\n  }\n  /**\n   * Attach type information\n   */\n\n\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    }; // check we have a node in the minimum\n\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum; // update left & right of node\n\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node; // update minimum node in heap if needed\n\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node; // this is the first node\n\n      this._minimum = node;\n    } // increment number of nodes in heap\n\n\n    this._size++; // return node\n\n    return node;\n  };\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum; // check we have a minimum\n\n    if (node === null) {\n      return node;\n    } // current minimum\n\n\n    var minimum = this._minimum; // get number of children\n\n    var numberOfChildren = node.degree; // pointer to the first child\n\n    var x = node.child; // for each child of node do...\n\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right; // remove x from child list\n\n      x.left.right = x.right;\n      x.right.left = x.left; // add x to root list of heap\n\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x; // set Parent[x] to null\n\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    } // remove node from root list of heap\n\n\n    node.left.right = node.right;\n    node.right.left = node.left; // update minimum\n\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right; // we need to update the pointer to the root with minimum key\n\n      minimum = _findMinimumNode(minimum, this._size);\n    } // decrement size of heap\n\n\n    this._size--; // update minimum\n\n    this._minimum = minimum; // return node\n\n    return node;\n  };\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1); // remove the smallest\n\n    this.extractMinimum();\n  };\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key; // get parent node\n\n    var parent = node.parent;\n\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent); // remove all nodes from parent to the root parent\n\n\n      _cascadingCut(minimum, parent);\n    } // update minimum node if needed\n\n\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    } // return minimum\n\n\n    return minimum;\n  }\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--; // reset y.child if necessary\n\n    if (parent.child === node) {\n      parent.child = node.right;\n    } // remove child if degree is 0\n\n\n    if (parent.degree === 0) {\n      parent.child = null;\n    } // add node to root list of heap\n\n\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node; // set parent[node] to null\n\n    node.parent = null; // set mark[node] to false\n\n    node.mark = false;\n  }\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n\n\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent; // if there's a parent...\n\n    if (!parent) {\n      return;\n    } // if node is unmarked, set it marked\n\n\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent); // cut its parent as well\n\n\n      _cascadingCut(parent);\n    }\n  }\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n\n\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left; // make node a Child of parent\n\n    node.parent = parent;\n\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    } // increase degree[parent]\n\n\n    parent.degree++; // set mark[node] false\n\n    node.mark = false;\n  };\n\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1; // create list with initial capacity\n\n    var array = new Array(arraySize); // find the number of root nodes.\n\n    var numRoots = 0;\n    var x = minimum;\n\n    if (x) {\n      numRoots++;\n      x = x.right;\n\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    } // vars\n\n\n    var y; // For each node in root list do...\n\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree; // get next node\n\n      var next = x.right; // check if there is a node already in array with the same degree\n\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n\n        if (!y) {\n          break;\n        } // make one node with the same degree a child of the other, do this based on the key value.\n\n\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        } // make y a child of x\n\n\n        _linkNodes(y, x); // we have handled this degree, go to next one.\n\n\n        array[d] = null;\n        d++;\n      } // save this node for later when we might encounter another of the same degree.\n\n\n      array[d] = x; // move forward through list.\n\n      x = next;\n      numRoots--;\n    } // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n\n\n    minimum = null; // loop nodes in array\n\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n\n      if (!y) {\n        continue;\n      } // check if we have a linked list\n\n\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left; // now add to root list, again.\n\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y; // check if this is a new min.\n\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n\n    return minimum;\n  }\n\n  return FibonacciHeap;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["factory","name","dependencies","createFibonacciHeapClass","_ref","smaller","larger","oneOverLogPhi","Math","log","sqrt","FibonacciHeap","SyntaxError","_minimum","_size","prototype","type","isFibonacciHeap","insert","key","value","node","degree","minimum","left","right","size","clear","isEmpty","extractMinimum","numberOfChildren","x","child","tempRight","parent","_findMinimumNode","remove","_decreaseKey","_cut","_cascadingCut","mark","_linkNodes","arraySize","floor","array","Array","numRoots","y","d","next","temp","i","isClass"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/type/matrix/FibonacciHeap.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'FibonacciHeap';\nvar dependencies = ['smaller', 'larger'];\nexport var createFibonacciHeapClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    smaller,\n    larger\n  } = _ref;\n  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);\n\n  /**\n   * Fibonacci Heap implementation, used interally for Matrix math.\n   * @class FibonacciHeap\n   * @constructor FibonacciHeap\n   */\n  function FibonacciHeap() {\n    if (!(this instanceof FibonacciHeap)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    // initialize fields\n    this._minimum = null;\n    this._size = 0;\n  }\n\n  /**\n   * Attach type information\n   */\n  FibonacciHeap.prototype.type = 'FibonacciHeap';\n  FibonacciHeap.prototype.isFibonacciHeap = true;\n\n  /**\n   * Inserts a new data element into the heap. No heap consolidation is\n   * performed at this time, the new node is simply inserted into the root\n   * list of this heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.insert = function (key, value) {\n    // create node\n    var node = {\n      key,\n      value,\n      degree: 0\n    };\n    // check we have a node in the minimum\n    if (this._minimum) {\n      // minimum node\n      var minimum = this._minimum;\n      // update left & right of node\n      node.left = minimum;\n      node.right = minimum.right;\n      minimum.right = node;\n      node.right.left = node;\n      // update minimum node in heap if needed\n      if (smaller(key, minimum.key)) {\n        // node has a smaller key, use it as minimum\n        this._minimum = node;\n      }\n    } else {\n      // set left & right\n      node.left = node;\n      node.right = node;\n      // this is the first node\n      this._minimum = node;\n    }\n    // increment number of nodes in heap\n    this._size++;\n    // return node\n    return node;\n  };\n\n  /**\n   * Returns the number of nodes in heap. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.size = function () {\n    return this._size;\n  };\n\n  /**\n   * Removes all elements from this heap.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.clear = function () {\n    this._minimum = null;\n    this._size = 0;\n  };\n\n  /**\n   * Returns true if the heap is empty, otherwise false.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.isEmpty = function () {\n    return this._size === 0;\n  };\n\n  /**\n   * Extracts the node with minimum key from heap. Amortized running\n   * time: O(log n).\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.extractMinimum = function () {\n    // node to remove\n    var node = this._minimum;\n    // check we have a minimum\n    if (node === null) {\n      return node;\n    }\n    // current minimum\n    var minimum = this._minimum;\n    // get number of children\n    var numberOfChildren = node.degree;\n    // pointer to the first child\n    var x = node.child;\n    // for each child of node do...\n    while (numberOfChildren > 0) {\n      // store node in right side\n      var tempRight = x.right;\n      // remove x from child list\n      x.left.right = x.right;\n      x.right.left = x.left;\n      // add x to root list of heap\n      x.left = minimum;\n      x.right = minimum.right;\n      minimum.right = x;\n      x.right.left = x;\n      // set Parent[x] to null\n      x.parent = null;\n      x = tempRight;\n      numberOfChildren--;\n    }\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // update minimum\n    if (node === node.right) {\n      // empty\n      minimum = null;\n    } else {\n      // update minimum\n      minimum = node.right;\n      // we need to update the pointer to the root with minimum key\n      minimum = _findMinimumNode(minimum, this._size);\n    }\n    // decrement size of heap\n    this._size--;\n    // update minimum\n    this._minimum = minimum;\n    // return node\n    return node;\n  };\n\n  /**\n   * Removes a node from the heap given the reference to the node. The trees\n   * in the heap will be consolidated, if necessary. This operation may fail\n   * to remove the correct element if there are nodes with key value -Infinity.\n   * Running time: O(log n) amortized.\n   * @memberof FibonacciHeap\n   */\n  FibonacciHeap.prototype.remove = function (node) {\n    // decrease key value\n    this._minimum = _decreaseKey(this._minimum, node, -1);\n    // remove the smallest\n    this.extractMinimum();\n  };\n\n  /**\n   * Decreases the key value for a heap node, given the new value to take on.\n   * The structure of the heap may be changed and will not be consolidated.\n   * Running time: O(1) amortized.\n   * @memberof FibonacciHeap\n   */\n  function _decreaseKey(minimum, node, key) {\n    // set node key\n    node.key = key;\n    // get parent node\n    var parent = node.parent;\n    if (parent && smaller(node.key, parent.key)) {\n      // remove node from parent\n      _cut(minimum, node, parent);\n      // remove all nodes from parent to the root parent\n      _cascadingCut(minimum, parent);\n    }\n    // update minimum node if needed\n    if (smaller(node.key, minimum.key)) {\n      minimum = node;\n    }\n    // return minimum\n    return minimum;\n  }\n\n  /**\n   * The reverse of the link operation: removes node from the child list of parent.\n   * This method assumes that min is non-null. Running time: O(1).\n   * @memberof FibonacciHeap\n   */\n  function _cut(minimum, node, parent) {\n    // remove node from parent children and decrement Degree[parent]\n    node.left.right = node.right;\n    node.right.left = node.left;\n    parent.degree--;\n    // reset y.child if necessary\n    if (parent.child === node) {\n      parent.child = node.right;\n    }\n    // remove child if degree is 0\n    if (parent.degree === 0) {\n      parent.child = null;\n    }\n    // add node to root list of heap\n    node.left = minimum;\n    node.right = minimum.right;\n    minimum.right = node;\n    node.right.left = node;\n    // set parent[node] to null\n    node.parent = null;\n    // set mark[node] to false\n    node.mark = false;\n  }\n\n  /**\n   * Performs a cascading cut operation. This cuts node from its parent and then\n   * does the same for its parent, and so on up the tree.\n   * Running time: O(log n); O(1) excluding the recursion.\n   * @memberof FibonacciHeap\n   */\n  function _cascadingCut(minimum, node) {\n    // store parent node\n    var parent = node.parent;\n    // if there's a parent...\n    if (!parent) {\n      return;\n    }\n    // if node is unmarked, set it marked\n    if (!node.mark) {\n      node.mark = true;\n    } else {\n      // it's marked, cut it from parent\n      _cut(minimum, node, parent);\n      // cut its parent as well\n      _cascadingCut(parent);\n    }\n  }\n\n  /**\n   * Make the first node a child of the second one. Running time: O(1) actual.\n   * @memberof FibonacciHeap\n   */\n  var _linkNodes = function _linkNodes(node, parent) {\n    // remove node from root list of heap\n    node.left.right = node.right;\n    node.right.left = node.left;\n    // make node a Child of parent\n    node.parent = parent;\n    if (!parent.child) {\n      parent.child = node;\n      node.right = node;\n      node.left = node;\n    } else {\n      node.left = parent.child;\n      node.right = parent.child.right;\n      parent.child.right = node;\n      node.right.left = node;\n    }\n    // increase degree[parent]\n    parent.degree++;\n    // set mark[node] false\n    node.mark = false;\n  };\n  function _findMinimumNode(minimum, size) {\n    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree\n    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;\n    // create list with initial capacity\n    var array = new Array(arraySize);\n    // find the number of root nodes.\n    var numRoots = 0;\n    var x = minimum;\n    if (x) {\n      numRoots++;\n      x = x.right;\n      while (x !== minimum) {\n        numRoots++;\n        x = x.right;\n      }\n    }\n    // vars\n    var y;\n    // For each node in root list do...\n    while (numRoots > 0) {\n      // access this node's degree..\n      var d = x.degree;\n      // get next node\n      var next = x.right;\n      // check if there is a node already in array with the same degree\n      while (true) {\n        // get node with the same degree is any\n        y = array[d];\n        if (!y) {\n          break;\n        }\n        // make one node with the same degree a child of the other, do this based on the key value.\n        if (larger(x.key, y.key)) {\n          var temp = y;\n          y = x;\n          x = temp;\n        }\n        // make y a child of x\n        _linkNodes(y, x);\n        // we have handled this degree, go to next one.\n        array[d] = null;\n        d++;\n      }\n      // save this node for later when we might encounter another of the same degree.\n      array[d] = x;\n      // move forward through list.\n      x = next;\n      numRoots--;\n    }\n    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].\n    minimum = null;\n    // loop nodes in array\n    for (var i = 0; i < arraySize; i++) {\n      // get current node\n      y = array[i];\n      if (!y) {\n        continue;\n      }\n      // check if we have a linked list\n      if (minimum) {\n        // First remove node from root list.\n        y.left.right = y.right;\n        y.right.left = y.left;\n        // now add to root list, again.\n        y.left = minimum;\n        y.right = minimum.right;\n        minimum.right = y;\n        y.right.left = y;\n        // check if this is a new min.\n        if (smaller(y.key, minimum.key)) {\n          minimum = y;\n        }\n      } else {\n        minimum = y;\n      }\n    }\n    return minimum;\n  }\n  return FibonacciHeap;\n}, {\n  isClass: true\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,SAAD,EAAY,QAAZ,CAAnB;AACA,OAAO,IAAIC,wBAAwB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACvF,IAAI;IACFC,OADE;IAEFC;EAFE,IAGAF,IAHJ;EAIA,IAAIG,aAAa,GAAG,MAAMC,IAAI,CAACC,GAAL,CAAS,CAAC,MAAMD,IAAI,CAACE,IAAL,CAAU,GAAV,CAAP,IAAyB,GAAlC,CAA1B;EAEA;AACF;AACA;AACA;AACA;;EACE,SAASC,aAAT,GAAyB;IACvB,IAAI,EAAE,gBAAgBA,aAAlB,CAAJ,EAAsC;MACpC,MAAM,IAAIC,WAAJ,CAAgB,kDAAhB,CAAN;IACD,CAHsB,CAKvB;;;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,KAAL,GAAa,CAAb;EACD;EAED;AACF;AACA;;;EACEH,aAAa,CAACI,SAAd,CAAwBC,IAAxB,GAA+B,eAA/B;EACAL,aAAa,CAACI,SAAd,CAAwBE,eAAxB,GAA0C,IAA1C;EAEA;AACF;AACA;AACA;AACA;AACA;;EACEN,aAAa,CAACI,SAAd,CAAwBG,MAAxB,GAAiC,UAAUC,GAAV,EAAeC,KAAf,EAAsB;IACrD;IACA,IAAIC,IAAI,GAAG;MACTF,GADS;MAETC,KAFS;MAGTE,MAAM,EAAE;IAHC,CAAX,CAFqD,CAOrD;;IACA,IAAI,KAAKT,QAAT,EAAmB;MACjB;MACA,IAAIU,OAAO,GAAG,KAAKV,QAAnB,CAFiB,CAGjB;;MACAQ,IAAI,CAACG,IAAL,GAAYD,OAAZ;MACAF,IAAI,CAACI,KAAL,GAAaF,OAAO,CAACE,KAArB;MACAF,OAAO,CAACE,KAAR,GAAgBJ,IAAhB;MACAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB,CAPiB,CAQjB;;MACA,IAAIhB,OAAO,CAACc,GAAD,EAAMI,OAAO,CAACJ,GAAd,CAAX,EAA+B;QAC7B;QACA,KAAKN,QAAL,GAAgBQ,IAAhB;MACD;IACF,CAbD,MAaO;MACL;MACAA,IAAI,CAACG,IAAL,GAAYH,IAAZ;MACAA,IAAI,CAACI,KAAL,GAAaJ,IAAb,CAHK,CAIL;;MACA,KAAKR,QAAL,GAAgBQ,IAAhB;IACD,CA3BoD,CA4BrD;;;IACA,KAAKP,KAAL,GA7BqD,CA8BrD;;IACA,OAAOO,IAAP;EACD,CAhCD;EAkCA;AACF;AACA;AACA;;;EACEV,aAAa,CAACI,SAAd,CAAwBW,IAAxB,GAA+B,YAAY;IACzC,OAAO,KAAKZ,KAAZ;EACD,CAFD;EAIA;AACF;AACA;AACA;;;EACEH,aAAa,CAACI,SAAd,CAAwBY,KAAxB,GAAgC,YAAY;IAC1C,KAAKd,QAAL,GAAgB,IAAhB;IACA,KAAKC,KAAL,GAAa,CAAb;EACD,CAHD;EAKA;AACF;AACA;AACA;;;EACEH,aAAa,CAACI,SAAd,CAAwBa,OAAxB,GAAkC,YAAY;IAC5C,OAAO,KAAKd,KAAL,KAAe,CAAtB;EACD,CAFD;EAIA;AACF;AACA;AACA;AACA;;;EACEH,aAAa,CAACI,SAAd,CAAwBc,cAAxB,GAAyC,YAAY;IACnD;IACA,IAAIR,IAAI,GAAG,KAAKR,QAAhB,CAFmD,CAGnD;;IACA,IAAIQ,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAOA,IAAP;IACD,CANkD,CAOnD;;;IACA,IAAIE,OAAO,GAAG,KAAKV,QAAnB,CARmD,CASnD;;IACA,IAAIiB,gBAAgB,GAAGT,IAAI,CAACC,MAA5B,CAVmD,CAWnD;;IACA,IAAIS,CAAC,GAAGV,IAAI,CAACW,KAAb,CAZmD,CAanD;;IACA,OAAOF,gBAAgB,GAAG,CAA1B,EAA6B;MAC3B;MACA,IAAIG,SAAS,GAAGF,CAAC,CAACN,KAAlB,CAF2B,CAG3B;;MACAM,CAAC,CAACP,IAAF,CAAOC,KAAP,GAAeM,CAAC,CAACN,KAAjB;MACAM,CAAC,CAACN,KAAF,CAAQD,IAAR,GAAeO,CAAC,CAACP,IAAjB,CAL2B,CAM3B;;MACAO,CAAC,CAACP,IAAF,GAASD,OAAT;MACAQ,CAAC,CAACN,KAAF,GAAUF,OAAO,CAACE,KAAlB;MACAF,OAAO,CAACE,KAAR,GAAgBM,CAAhB;MACAA,CAAC,CAACN,KAAF,CAAQD,IAAR,GAAeO,CAAf,CAV2B,CAW3B;;MACAA,CAAC,CAACG,MAAF,GAAW,IAAX;MACAH,CAAC,GAAGE,SAAJ;MACAH,gBAAgB;IACjB,CA7BkD,CA8BnD;;;IACAT,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;IACAJ,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB,CAhCmD,CAiCnD;;IACA,IAAIH,IAAI,KAAKA,IAAI,CAACI,KAAlB,EAAyB;MACvB;MACAF,OAAO,GAAG,IAAV;IACD,CAHD,MAGO;MACL;MACAA,OAAO,GAAGF,IAAI,CAACI,KAAf,CAFK,CAGL;;MACAF,OAAO,GAAGY,gBAAgB,CAACZ,OAAD,EAAU,KAAKT,KAAf,CAA1B;IACD,CA1CkD,CA2CnD;;;IACA,KAAKA,KAAL,GA5CmD,CA6CnD;;IACA,KAAKD,QAAL,GAAgBU,OAAhB,CA9CmD,CA+CnD;;IACA,OAAOF,IAAP;EACD,CAjDD;EAmDA;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEV,aAAa,CAACI,SAAd,CAAwBqB,MAAxB,GAAiC,UAAUf,IAAV,EAAgB;IAC/C;IACA,KAAKR,QAAL,GAAgBwB,YAAY,CAAC,KAAKxB,QAAN,EAAgBQ,IAAhB,EAAsB,CAAC,CAAvB,CAA5B,CAF+C,CAG/C;;IACA,KAAKQ,cAAL;EACD,CALD;EAOA;AACF;AACA;AACA;AACA;AACA;;;EACE,SAASQ,YAAT,CAAsBd,OAAtB,EAA+BF,IAA/B,EAAqCF,GAArC,EAA0C;IACxC;IACAE,IAAI,CAACF,GAAL,GAAWA,GAAX,CAFwC,CAGxC;;IACA,IAAIe,MAAM,GAAGb,IAAI,CAACa,MAAlB;;IACA,IAAIA,MAAM,IAAI7B,OAAO,CAACgB,IAAI,CAACF,GAAN,EAAWe,MAAM,CAACf,GAAlB,CAArB,EAA6C;MAC3C;MACAmB,IAAI,CAACf,OAAD,EAAUF,IAAV,EAAgBa,MAAhB,CAAJ,CAF2C,CAG3C;;;MACAK,aAAa,CAAChB,OAAD,EAAUW,MAAV,CAAb;IACD,CAVuC,CAWxC;;;IACA,IAAI7B,OAAO,CAACgB,IAAI,CAACF,GAAN,EAAWI,OAAO,CAACJ,GAAnB,CAAX,EAAoC;MAClCI,OAAO,GAAGF,IAAV;IACD,CAduC,CAexC;;;IACA,OAAOE,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE,SAASe,IAAT,CAAcf,OAAd,EAAuBF,IAAvB,EAA6Ba,MAA7B,EAAqC;IACnC;IACAb,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;IACAJ,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB;IACAU,MAAM,CAACZ,MAAP,GAJmC,CAKnC;;IACA,IAAIY,MAAM,CAACF,KAAP,KAAiBX,IAArB,EAA2B;MACzBa,MAAM,CAACF,KAAP,GAAeX,IAAI,CAACI,KAApB;IACD,CARkC,CASnC;;;IACA,IAAIS,MAAM,CAACZ,MAAP,KAAkB,CAAtB,EAAyB;MACvBY,MAAM,CAACF,KAAP,GAAe,IAAf;IACD,CAZkC,CAanC;;;IACAX,IAAI,CAACG,IAAL,GAAYD,OAAZ;IACAF,IAAI,CAACI,KAAL,GAAaF,OAAO,CAACE,KAArB;IACAF,OAAO,CAACE,KAAR,GAAgBJ,IAAhB;IACAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB,CAjBmC,CAkBnC;;IACAA,IAAI,CAACa,MAAL,GAAc,IAAd,CAnBmC,CAoBnC;;IACAb,IAAI,CAACmB,IAAL,GAAY,KAAZ;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACE,SAASD,aAAT,CAAuBhB,OAAvB,EAAgCF,IAAhC,EAAsC;IACpC;IACA,IAAIa,MAAM,GAAGb,IAAI,CAACa,MAAlB,CAFoC,CAGpC;;IACA,IAAI,CAACA,MAAL,EAAa;MACX;IACD,CANmC,CAOpC;;;IACA,IAAI,CAACb,IAAI,CAACmB,IAAV,EAAgB;MACdnB,IAAI,CAACmB,IAAL,GAAY,IAAZ;IACD,CAFD,MAEO;MACL;MACAF,IAAI,CAACf,OAAD,EAAUF,IAAV,EAAgBa,MAAhB,CAAJ,CAFK,CAGL;;;MACAK,aAAa,CAACL,MAAD,CAAb;IACD;EACF;EAED;AACF;AACA;AACA;;;EACE,IAAIO,UAAU,GAAG,SAASA,UAAT,CAAoBpB,IAApB,EAA0Ba,MAA1B,EAAkC;IACjD;IACAb,IAAI,CAACG,IAAL,CAAUC,KAAV,GAAkBJ,IAAI,CAACI,KAAvB;IACAJ,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAI,CAACG,IAAvB,CAHiD,CAIjD;;IACAH,IAAI,CAACa,MAAL,GAAcA,MAAd;;IACA,IAAI,CAACA,MAAM,CAACF,KAAZ,EAAmB;MACjBE,MAAM,CAACF,KAAP,GAAeX,IAAf;MACAA,IAAI,CAACI,KAAL,GAAaJ,IAAb;MACAA,IAAI,CAACG,IAAL,GAAYH,IAAZ;IACD,CAJD,MAIO;MACLA,IAAI,CAACG,IAAL,GAAYU,MAAM,CAACF,KAAnB;MACAX,IAAI,CAACI,KAAL,GAAaS,MAAM,CAACF,KAAP,CAAaP,KAA1B;MACAS,MAAM,CAACF,KAAP,CAAaP,KAAb,GAAqBJ,IAArB;MACAA,IAAI,CAACI,KAAL,CAAWD,IAAX,GAAkBH,IAAlB;IACD,CAfgD,CAgBjD;;;IACAa,MAAM,CAACZ,MAAP,GAjBiD,CAkBjD;;IACAD,IAAI,CAACmB,IAAL,GAAY,KAAZ;EACD,CApBD;;EAqBA,SAASL,gBAAT,CAA0BZ,OAA1B,EAAmCG,IAAnC,EAAyC;IACvC;IACA,IAAIgB,SAAS,GAAGlC,IAAI,CAACmC,KAAL,CAAWnC,IAAI,CAACC,GAAL,CAASiB,IAAT,IAAiBnB,aAA5B,IAA6C,CAA7D,CAFuC,CAGvC;;IACA,IAAIqC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAZ,CAJuC,CAKvC;;IACA,IAAII,QAAQ,GAAG,CAAf;IACA,IAAIf,CAAC,GAAGR,OAAR;;IACA,IAAIQ,CAAJ,EAAO;MACLe,QAAQ;MACRf,CAAC,GAAGA,CAAC,CAACN,KAAN;;MACA,OAAOM,CAAC,KAAKR,OAAb,EAAsB;QACpBuB,QAAQ;QACRf,CAAC,GAAGA,CAAC,CAACN,KAAN;MACD;IACF,CAfsC,CAgBvC;;;IACA,IAAIsB,CAAJ,CAjBuC,CAkBvC;;IACA,OAAOD,QAAQ,GAAG,CAAlB,EAAqB;MACnB;MACA,IAAIE,CAAC,GAAGjB,CAAC,CAACT,MAAV,CAFmB,CAGnB;;MACA,IAAI2B,IAAI,GAAGlB,CAAC,CAACN,KAAb,CAJmB,CAKnB;;MACA,OAAO,IAAP,EAAa;QACX;QACAsB,CAAC,GAAGH,KAAK,CAACI,CAAD,CAAT;;QACA,IAAI,CAACD,CAAL,EAAQ;UACN;QACD,CALU,CAMX;;;QACA,IAAIzC,MAAM,CAACyB,CAAC,CAACZ,GAAH,EAAQ4B,CAAC,CAAC5B,GAAV,CAAV,EAA0B;UACxB,IAAI+B,IAAI,GAAGH,CAAX;UACAA,CAAC,GAAGhB,CAAJ;UACAA,CAAC,GAAGmB,IAAJ;QACD,CAXU,CAYX;;;QACAT,UAAU,CAACM,CAAD,EAAIhB,CAAJ,CAAV,CAbW,CAcX;;;QACAa,KAAK,CAACI,CAAD,CAAL,GAAW,IAAX;QACAA,CAAC;MACF,CAvBkB,CAwBnB;;;MACAJ,KAAK,CAACI,CAAD,CAAL,GAAWjB,CAAX,CAzBmB,CA0BnB;;MACAA,CAAC,GAAGkB,IAAJ;MACAH,QAAQ;IACT,CAhDsC,CAiDvC;;;IACAvB,OAAO,GAAG,IAAV,CAlDuC,CAmDvC;;IACA,KAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;MAClC;MACAJ,CAAC,GAAGH,KAAK,CAACO,CAAD,CAAT;;MACA,IAAI,CAACJ,CAAL,EAAQ;QACN;MACD,CALiC,CAMlC;;;MACA,IAAIxB,OAAJ,EAAa;QACX;QACAwB,CAAC,CAACvB,IAAF,CAAOC,KAAP,GAAesB,CAAC,CAACtB,KAAjB;QACAsB,CAAC,CAACtB,KAAF,CAAQD,IAAR,GAAeuB,CAAC,CAACvB,IAAjB,CAHW,CAIX;;QACAuB,CAAC,CAACvB,IAAF,GAASD,OAAT;QACAwB,CAAC,CAACtB,KAAF,GAAUF,OAAO,CAACE,KAAlB;QACAF,OAAO,CAACE,KAAR,GAAgBsB,CAAhB;QACAA,CAAC,CAACtB,KAAF,CAAQD,IAAR,GAAeuB,CAAf,CARW,CASX;;QACA,IAAI1C,OAAO,CAAC0C,CAAC,CAAC5B,GAAH,EAAQI,OAAO,CAACJ,GAAhB,CAAX,EAAiC;UAC/BI,OAAO,GAAGwB,CAAV;QACD;MACF,CAbD,MAaO;QACLxB,OAAO,GAAGwB,CAAV;MACD;IACF;;IACD,OAAOxB,OAAP;EACD;;EACD,OAAOZ,aAAP;AACD,CAzV2D,EAyVzD;EACDyC,OAAO,EAAE;AADR,CAzVyD,CAArD"},"metadata":{},"sourceType":"module"}