{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    } // m arrays\n\n\n    var size = m._size; // columns\n\n    var n = size[1]; // symbolic analysis result\n\n    var q;\n    var lnz = 100;\n    var unz = 100; // update symbolic analysis parameters\n\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    } // L arrays\n\n\n    var lvalues = []; // (lnz)\n\n    var lindex = []; // (lnz)\n\n    var lptr = []; // (n + 1)\n    // L\n\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    }); // U arrays\n\n    var uvalues = []; // (unz)\n\n    var uindex = []; // (unz)\n\n    var uptr = []; // (n + 1)\n    // U\n\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    }); // inverse of permutation vector\n\n    var pinv = []; // (n)\n    // vars\n\n    var i, p; // allocate arrays\n\n    var x = []; // (n)\n\n    var xi = []; // (2 * n)\n    // initialize variables\n\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0; // no rows pivotal yet\n\n      pinv[i] = -1; // no cols of L yet\n\n      lptr[i + 1] = 0;\n    } // reset number of nonzero elements in L and U\n\n\n    lnz = 0;\n    unz = 0; // compute L(:,k) and U(:,k)\n\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz; // apply column permutations if needed\n\n      var col = q ? q[k] : k; // solve triangular system, x = L\\A(:,col)\n\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1); // find pivot\n\n      var ipiv = -1;\n      var a = -1; // loop xi[] from top -> n\n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p]; // check row i is not yet pivotal\n\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]); // check absoulte value is greater than pivot value\n\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      } // validate we found a valid pivot\n\n\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      } // update actual pivot column, give preference to diagonal value\n\n\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      } // the chosen pivot\n\n\n      var pivot = x[ipiv]; // last entry in U(:,k) is U(k,k)\n\n      uindex[unz] = k;\n      uvalues[unz++] = pivot; // ipiv is the kth pivot row\n\n      pinv[ipiv] = k; // first entry in L(:,k) is L(k,k) = 1\n\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1; // L(k+1:n,k) = x / pivot\n\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p]; // check x(i) is an entry in L(:,k)\n\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i; // scale pivot column\n\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        } // x[0..n-1] = 0 for next k\n\n\n        x[i] = 0;\n      }\n    } // update ptr\n\n\n    lptr[n] = lnz;\n    uptr[n] = unz; // fix row indices of L for final pinv\n\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    } // trim arrays\n\n\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz); // return LU factor\n\n    return {\n      L,\n      U,\n      pinv\n    };\n  };\n});","map":{"version":3,"names":["factory","createCsSpsolve","name","dependencies","createCsLu","_ref","abs","divideScalar","multiply","subtract","larger","largerEq","SparseMatrix","csSpsolve","csLu","m","s","tol","size","_size","n","q","lnz","unz","lvalues","lindex","lptr","L","values","index","ptr","uvalues","uindex","uptr","U","pinv","i","p","x","xi","k","col","top","ipiv","a","xabs","pivot","splice","length"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/function/algebra/sparse/csLu.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { createCsSpsolve } from './csSpsolve.js';\nvar name = 'csLu';\nvar dependencies = ['abs', 'divideScalar', 'multiply', 'subtract', 'larger', 'largerEq', 'SparseMatrix'];\nexport var createCsLu = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    abs,\n    divideScalar,\n    multiply,\n    subtract,\n    larger,\n    largerEq,\n    SparseMatrix\n  } = _ref;\n  var csSpsolve = createCsSpsolve({\n    divideScalar,\n    multiply,\n    subtract\n  });\n\n  /**\n   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization\n   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L\n   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so\n   * L * U = A(p, q), where p is the inverse of pinv.\n   *\n   * @param {Matrix}  m               The A Matrix to factorize\n   * @param {Object}  s               The symbolic analysis from csSqr(). Provides the fill-reducing\n   *                                  column ordering q\n   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)\n   *\n   * @return {Number}                 The numeric LU factorization of A or null\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   */\n  return function csLu(m, s, tol) {\n    // validate input\n    if (!m) {\n      return null;\n    }\n    // m arrays\n    var size = m._size;\n    // columns\n    var n = size[1];\n    // symbolic analysis result\n    var q;\n    var lnz = 100;\n    var unz = 100;\n    // update symbolic analysis parameters\n    if (s) {\n      q = s.q;\n      lnz = s.lnz || lnz;\n      unz = s.unz || unz;\n    }\n    // L arrays\n    var lvalues = []; // (lnz)\n    var lindex = []; // (lnz)\n    var lptr = []; // (n + 1)\n    // L\n    var L = new SparseMatrix({\n      values: lvalues,\n      index: lindex,\n      ptr: lptr,\n      size: [n, n]\n    });\n    // U arrays\n    var uvalues = []; // (unz)\n    var uindex = []; // (unz)\n    var uptr = []; // (n + 1)\n    // U\n    var U = new SparseMatrix({\n      values: uvalues,\n      index: uindex,\n      ptr: uptr,\n      size: [n, n]\n    });\n    // inverse of permutation vector\n    var pinv = []; // (n)\n    // vars\n    var i, p;\n    // allocate arrays\n    var x = []; // (n)\n    var xi = []; // (2 * n)\n    // initialize variables\n    for (i = 0; i < n; i++) {\n      // clear workspace\n      x[i] = 0;\n      // no rows pivotal yet\n      pinv[i] = -1;\n      // no cols of L yet\n      lptr[i + 1] = 0;\n    }\n    // reset number of nonzero elements in L and U\n    lnz = 0;\n    unz = 0;\n    // compute L(:,k) and U(:,k)\n    for (var k = 0; k < n; k++) {\n      // update ptr\n      lptr[k] = lnz;\n      uptr[k] = unz;\n      // apply column permutations if needed\n      var col = q ? q[k] : k;\n      // solve triangular system, x = L\\A(:,col)\n      var top = csSpsolve(L, m, col, xi, x, pinv, 1);\n      // find pivot\n      var ipiv = -1;\n      var a = -1;\n      // loop xi[] from top -> n\n      for (p = top; p < n; p++) {\n        // x[i] is nonzero\n        i = xi[p];\n        // check row i is not yet pivotal\n        if (pinv[i] < 0) {\n          // absolute value of x[i]\n          var xabs = abs(x[i]);\n          // check absoulte value is greater than pivot value\n          if (larger(xabs, a)) {\n            // largest pivot candidate so far\n            a = xabs;\n            ipiv = i;\n          }\n        } else {\n          // x(i) is the entry U(pinv[i],k)\n          uindex[unz] = pinv[i];\n          uvalues[unz++] = x[i];\n        }\n      }\n      // validate we found a valid pivot\n      if (ipiv === -1 || a <= 0) {\n        return null;\n      }\n      // update actual pivot column, give preference to diagonal value\n      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol))) {\n        ipiv = col;\n      }\n      // the chosen pivot\n      var pivot = x[ipiv];\n      // last entry in U(:,k) is U(k,k)\n      uindex[unz] = k;\n      uvalues[unz++] = pivot;\n      // ipiv is the kth pivot row\n      pinv[ipiv] = k;\n      // first entry in L(:,k) is L(k,k) = 1\n      lindex[lnz] = ipiv;\n      lvalues[lnz++] = 1;\n      // L(k+1:n,k) = x / pivot\n      for (p = top; p < n; p++) {\n        // row\n        i = xi[p];\n        // check x(i) is an entry in L(:,k)\n        if (pinv[i] < 0) {\n          // save unpermuted row in L\n          lindex[lnz] = i;\n          // scale pivot column\n          lvalues[lnz++] = divideScalar(x[i], pivot);\n        }\n        // x[0..n-1] = 0 for next k\n        x[i] = 0;\n      }\n    }\n    // update ptr\n    lptr[n] = lnz;\n    uptr[n] = unz;\n    // fix row indices of L for final pinv\n    for (p = 0; p < lnz; p++) {\n      lindex[p] = pinv[lindex[p]];\n    }\n    // trim arrays\n    lvalues.splice(lnz, lvalues.length - lnz);\n    lindex.splice(lnz, lindex.length - lnz);\n    uvalues.splice(unz, uvalues.length - unz);\n    uindex.splice(unz, uindex.length - unz);\n    // return LU factor\n    return {\n      L,\n      U,\n      pinv\n    };\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}