{"ast":null,"code":"import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this._dimensions = [];\n    this._isScalar = true;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n\n        this._dimensions.push(m); // size\n\n\n        var size = m.size(); // scalar\n\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      } // TODO: implement support for wildcard '*'\n\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    } // create matrix\n\n\n    return new ImmutableDenseMatrix(arg);\n  }\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n\n\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n\n\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n\n\n  Index.prototype.size = function () {\n    var size = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n\n    return size;\n  };\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n\n\n  Index.prototype.max = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n\n    return values;\n  };\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n\n\n  Index.prototype.min = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n\n    return values;\n  };\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n\n\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n\n\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n\n\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n\n\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n\n\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.toArray = function () {\n    var array = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n\n    return array;\n  };\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.valueOf = Index.prototype.toArray;\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n\n  Index.prototype.toString = function () {\n    var strings = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n\n    return '[' + strings.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n\n\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n\n\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n\n  return Index;\n}, {\n  isClass: true\n});","map":{"version":3,"names":["isMatrix","isRange","clone","isInteger","factory","name","dependencies","createIndexClass","_ref","ImmutableDenseMatrix","Index","ranges","SyntaxError","_dimensions","_isScalar","i","ii","arguments","length","arg","push","Array","isArray","m","_createImmutableMatrix","valueOf","size","TypeError","prototype","type","isIndex","l","index","create","apply","d","max","values","range","min","forEach","callback","dimension","dim","isObjectProperty","getObjectProperty","isScalar","toArray","array","toString","strings","JSON","stringify","join","toJSON","mathjs","dimensions","fromJSON","json","isClass"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js"],"sourcesContent":["import { isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     A Matrix with the Set values\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (Array.isArray(arg) || isMatrix(arg)) {\n        // create matrix\n        var m = _createImmutableMatrix(arg.valueOf());\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}