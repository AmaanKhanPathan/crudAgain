{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'matAlgo06xS0S0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo06xS0S0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function matAlgo06xS0S0(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = []; // workspaces\n\n    var x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    var w = []; // marks indicating value in a given row has been updated\n\n    var u = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, cindex, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, cindex, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"names":["factory","DimensionError","scatter","name","dependencies","createMatAlgo06xS0S0","_ref","typed","equalScalar","matAlgo06xS0S0","a","b","callback","avalues","_values","asize","_size","adt","_datatype","bvalues","bsize","bdt","length","RangeError","rows","columns","dt","eq","zero","cf","find","convert","cvalues","undefined","cindex","cptr","x","w","u","j","mark","k","i","v","push","splice","p","r","createSparseMatrix","values","index","ptr","size","datatype"],"sources":["C:/Users/lenovo/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo06xS0S0.js"],"sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nimport { scatter } from '../../../utils/collection.js';\nvar name = 'matAlgo06xS0S0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo06xS0S0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo06xS0S0(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = avalues && bvalues ? [] : undefined;\n    var cindex = [];\n    var cptr = [];\n\n    // workspaces\n    var x = cvalues ? [] : undefined;\n    // marks indicating we have a value in x for a given column\n    var w = [];\n    // marks indicating value in a given row has been updated\n    var u = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // scatter the values of A(:,j) into workspace\n      scatter(a, j, w, x, u, mark, cindex, cf);\n      // scatter the values of B(:,j) into workspace\n      scatter(b, j, w, x, u, mark, cindex, cf);\n      // check we need to process values (non pattern matrix)\n      if (x) {\n        // initialize first index in j\n        var k = cptr[j];\n        // loop index in j\n        while (k < cindex.length) {\n          // row\n          var i = cindex[k];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[i] === mark) {\n            // value @ i\n            var v = x[i];\n            // check for zero value\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v);\n              // increment pointer\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        var p = cptr[j];\n        // loop index in j\n        while (p < cindex.length) {\n          // row\n          var r = cindex[p];\n          // check function was invoked on current row (Aij !=0 && Bij != 0)\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,IAAI,GAAG,gBAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,aAAV,CAAnB;AACA,OAAO,IAAIC,oBAAoB,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;EACnF,IAAI;IACFC,KADE;IAEFC;EAFE,IAGAF,IAHJ;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,OAAO,SAASG,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8BC,QAA9B,EAAwC;IAC7C;IACA,IAAIC,OAAO,GAAGH,CAAC,CAACI,OAAhB;IACA,IAAIC,KAAK,GAAGL,CAAC,CAACM,KAAd;IACA,IAAIC,GAAG,GAAGP,CAAC,CAACQ,SAAZ,CAJ6C,CAK7C;;IACA,IAAIC,OAAO,GAAGR,CAAC,CAACG,OAAhB;IACA,IAAIM,KAAK,GAAGT,CAAC,CAACK,KAAd;IACA,IAAIK,GAAG,GAAGV,CAAC,CAACO,SAAZ,CAR6C,CAU7C;;IACA,IAAIH,KAAK,CAACO,MAAN,KAAiBF,KAAK,CAACE,MAA3B,EAAmC;MACjC,MAAM,IAAIrB,cAAJ,CAAmBc,KAAK,CAACO,MAAzB,EAAiCF,KAAK,CAACE,MAAvC,CAAN;IACD,CAb4C,CAe7C;;;IACA,IAAIP,KAAK,CAAC,CAAD,CAAL,KAAaK,KAAK,CAAC,CAAD,CAAlB,IAAyBL,KAAK,CAAC,CAAD,CAAL,KAAaK,KAAK,CAAC,CAAD,CAA/C,EAAoD;MAClD,MAAM,IAAIG,UAAJ,CAAe,mCAAmCR,KAAnC,GAA2C,yBAA3C,GAAuEK,KAAvE,GAA+E,GAA9F,CAAN;IACD,CAlB4C,CAoB7C;;;IACA,IAAII,IAAI,GAAGT,KAAK,CAAC,CAAD,CAAhB;IACA,IAAIU,OAAO,GAAGV,KAAK,CAAC,CAAD,CAAnB,CAtB6C,CAwB7C;;IACA,IAAIW,EAAJ,CAzB6C,CA0B7C;;IACA,IAAIC,EAAE,GAAGnB,WAAT,CA3B6C,CA4B7C;;IACA,IAAIoB,IAAI,GAAG,CAAX,CA7B6C,CA8B7C;;IACA,IAAIC,EAAE,GAAGjB,QAAT,CA/B6C,CAiC7C;;IACA,IAAI,OAAOK,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAKI,GAAvC,EAA4C;MAC1C;MACAK,EAAE,GAAGT,GAAL,CAF0C,CAG1C;;MACAU,EAAE,GAAGpB,KAAK,CAACuB,IAAN,CAAWtB,WAAX,EAAwB,CAACkB,EAAD,EAAKA,EAAL,CAAxB,CAAL,CAJ0C,CAK1C;;MACAE,IAAI,GAAGrB,KAAK,CAACwB,OAAN,CAAc,CAAd,EAAiBL,EAAjB,CAAP,CAN0C,CAO1C;;MACAG,EAAE,GAAGtB,KAAK,CAACuB,IAAN,CAAWlB,QAAX,EAAqB,CAACc,EAAD,EAAKA,EAAL,CAArB,CAAL;IACD,CA3C4C,CA6C7C;;;IACA,IAAIM,OAAO,GAAGnB,OAAO,IAAIM,OAAX,GAAqB,EAArB,GAA0Bc,SAAxC;IACA,IAAIC,MAAM,GAAG,EAAb;IACA,IAAIC,IAAI,GAAG,EAAX,CAhD6C,CAkD7C;;IACA,IAAIC,CAAC,GAAGJ,OAAO,GAAG,EAAH,GAAQC,SAAvB,CAnD6C,CAoD7C;;IACA,IAAII,CAAC,GAAG,EAAR,CArD6C,CAsD7C;;IACA,IAAIC,CAAC,GAAG,EAAR,CAvD6C,CAyD7C;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,OAApB,EAA6Bc,CAAC,EAA9B,EAAkC;MAChC;MACAJ,IAAI,CAACI,CAAD,CAAJ,GAAUL,MAAM,CAACZ,MAAjB,CAFgC,CAGhC;;MACA,IAAIkB,IAAI,GAAGD,CAAC,GAAG,CAAf,CAJgC,CAKhC;;MACArC,OAAO,CAACQ,CAAD,EAAI6B,CAAJ,EAAOF,CAAP,EAAUD,CAAV,EAAaE,CAAb,EAAgBE,IAAhB,EAAsBN,MAAtB,EAA8BL,EAA9B,CAAP,CANgC,CAOhC;;MACA3B,OAAO,CAACS,CAAD,EAAI4B,CAAJ,EAAOF,CAAP,EAAUD,CAAV,EAAaE,CAAb,EAAgBE,IAAhB,EAAsBN,MAAtB,EAA8BL,EAA9B,CAAP,CARgC,CAShC;;MACA,IAAIO,CAAJ,EAAO;QACL;QACA,IAAIK,CAAC,GAAGN,IAAI,CAACI,CAAD,CAAZ,CAFK,CAGL;;QACA,OAAOE,CAAC,GAAGP,MAAM,CAACZ,MAAlB,EAA0B;UACxB;UACA,IAAIoB,CAAC,GAAGR,MAAM,CAACO,CAAD,CAAd,CAFwB,CAGxB;;UACA,IAAIH,CAAC,CAACI,CAAD,CAAD,KAASF,IAAb,EAAmB;YACjB;YACA,IAAIG,CAAC,GAAGP,CAAC,CAACM,CAAD,CAAT,CAFiB,CAGjB;;YACA,IAAI,CAACf,EAAE,CAACgB,CAAD,EAAIf,IAAJ,CAAP,EAAkB;cAChB;cACAI,OAAO,CAACY,IAAR,CAAaD,CAAb,EAFgB,CAGhB;;cACAF,CAAC;YACF,CALD,MAKO;cACL;cACAP,MAAM,CAACW,MAAP,CAAcJ,CAAd,EAAiB,CAAjB;YACD;UACF,CAbD,MAaO;YACL;YACAP,MAAM,CAACW,MAAP,CAAcJ,CAAd,EAAiB,CAAjB;UACD;QACF;MACF,CA1BD,MA0BO;QACL;QACA,IAAIK,CAAC,GAAGX,IAAI,CAACI,CAAD,CAAZ,CAFK,CAGL;;QACA,OAAOO,CAAC,GAAGZ,MAAM,CAACZ,MAAlB,EAA0B;UACxB;UACA,IAAIyB,CAAC,GAAGb,MAAM,CAACY,CAAD,CAAd,CAFwB,CAGxB;;UACA,IAAIR,CAAC,CAACS,CAAD,CAAD,KAASP,IAAb,EAAmB;YACjB;YACAN,MAAM,CAACW,MAAP,CAAcC,CAAd,EAAiB,CAAjB;UACD,CAHD,MAGO;YACL;YACAA,CAAC;UACF;QACF;MACF;IACF,CA/G4C,CAgH7C;;;IACAX,IAAI,CAACV,OAAD,CAAJ,GAAgBS,MAAM,CAACZ,MAAvB,CAjH6C,CAmH7C;;IACA,OAAOZ,CAAC,CAACsC,kBAAF,CAAqB;MAC1BC,MAAM,EAAEjB,OADkB;MAE1BkB,KAAK,EAAEhB,MAFmB;MAG1BiB,GAAG,EAAEhB,IAHqB;MAI1BiB,IAAI,EAAE,CAAC5B,IAAD,EAAOC,OAAP,CAJoB;MAK1B4B,QAAQ,EAAE3B;IALgB,CAArB,CAAP;EAOD,CA3HD;AA4HD,CAnJuD,CAAjD"},"metadata":{},"sourceType":"module"}